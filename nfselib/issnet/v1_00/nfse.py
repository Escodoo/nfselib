#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Jul 30 18:18:38 2020 by generateDS.py version 2.30.15.
# Python 3.8.5 (default, Jul 21 2020, 10:42:08)  [Clang 11.0.0 (clang-1100.0.33.17)]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('--no-collect-includes', '')
#   ('--use-getter-setter', 'none')
#   ('-f', '')
#   ('-o', './issnetlib/v1_00/nfse.py')
#
# Command line arguments:
#   ./process_includes/nfse.xsd
#
# Command line:
#   /Users/marcelsavegnago/Projetos/odoo/python-libs/issnet-test/bin/erpbrasil-edoc-gen-generate-python --no-namespace-defs --no-collect-includes --use-getter-setter="none" -f -o "./issnetlib/v1_00/nfse.py" ./process_includes/nfse.xsd
#
# Current working directory (os.getcwd()):
#   issnet-test
#

import os
import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ImportError:
    GenerateDSNamespaceTypePrefixes_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class tcCpfCnpj(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cpf=None, Cnpj=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Cpf = Cpf
        self.validate_tsCpf(self.Cpf)
        self.Cnpj = Cnpj
        self.validate_tsCnpj(self.Cnpj)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcCpfCnpj)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcCpfCnpj.subclass:
            return tcCpfCnpj.subclass(*args_, **kwargs_)
        else:
            return tcCpfCnpj(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCpf(self, value):
        # Validate type tsCpf, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 11:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsCpf' % {"value" : value.encode("utf-8")} )
    def validate_tsCnpj(self, value):
        # Validate type tsCnpj, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 14:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsCnpj' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Cpf is not None or
            self.Cnpj is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCpfCnpj', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcCpfCnpj')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcCpfCnpj')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcCpfCnpj', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcCpfCnpj'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCpfCnpj', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cpf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCpf>%s</%sCpf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cpf), input_name='Cpf')), namespaceprefix_ , eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cnpj), input_name='Cnpj')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cpf':
            Cpf_ = child_.text
            Cpf_ = self.gds_validate_string(Cpf_, node, 'Cpf')
            self.Cpf = Cpf_
            # validate type tsCpf
            self.validate_tsCpf(self.Cpf)
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            # validate type tsCnpj
            self.validate_tsCnpj(self.Cnpj)
# end class tcCpfCnpj


class tcEndereco(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Endereco=None, Numero=None, Complemento=None, Bairro=None, CodigoMunicipio=None, Uf=None, Cep=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Endereco = Endereco
        self.validate_tsEndereco(self.Endereco)
        self.Numero = Numero
        self.validate_tsNumeroEndereco(self.Numero)
        self.Complemento = Complemento
        self.validate_tsComplementoEndereco(self.Complemento)
        self.Bairro = Bairro
        self.validate_tsBairro(self.Bairro)
        self.CodigoMunicipio = CodigoMunicipio
        self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
        self.Uf = Uf
        self.validate_tsUf(self.Uf)
        self.Cep = Cep
        self.validate_tsCep(self.Cep)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcEndereco)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcEndereco.subclass:
            return tcEndereco.subclass(*args_, **kwargs_)
        else:
            return tcEndereco(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsEndereco(self, value):
        # Validate type tsEndereco, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 125:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsEndereco' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsEndereco' % {"value" : value.encode("utf-8")} )
    def validate_tsNumeroEndereco(self, value):
        # Validate type tsNumeroEndereco, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 10:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsNumeroEndereco' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsNumeroEndereco' % {"value" : value.encode("utf-8")} )
    def validate_tsComplementoEndereco(self, value):
        # Validate type tsComplementoEndereco, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsComplementoEndereco' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsComplementoEndereco' % {"value" : value.encode("utf-8")} )
    def validate_tsBairro(self, value):
        # Validate type tsBairro, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsBairro' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsBairro' % {"value" : value.encode("utf-8")} )
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCodigoMunicipioIbge' % {"value" : value} )
    def validate_tsUf(self, value):
        # Validate type tsUf, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsUf' % {"value" : value.encode("utf-8")} )
    def validate_tsCep(self, value):
        # Validate type tsCep, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 8:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCep' % {"value" : value} )
    def hasContent_(self):
        if (
            self.Endereco is not None or
            self.Numero is not None or
            self.Complemento is not None or
            self.Bairro is not None or
            self.CodigoMunicipio is not None or
            self.Uf is not None or
            self.Cep is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcEndereco', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcEndereco')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcEndereco')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcEndereco', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcEndereco'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcEndereco', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Endereco is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEndereco>%s</%sEndereco>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Endereco), input_name='Endereco')), namespaceprefix_ , eol_))
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Numero), input_name='Numero')), namespaceprefix_ , eol_))
        if self.Complemento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sComplemento>%s</%sComplemento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Complemento), input_name='Complemento')), namespaceprefix_ , eol_))
        if self.Bairro is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBairro>%s</%sBairro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Bairro), input_name='Bairro')), namespaceprefix_ , eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespaceprefix_ , eol_))
        if self.Uf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUf>%s</%sUf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Uf), input_name='Uf')), namespaceprefix_ , eol_))
        if self.Cep is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCep>%s</%sCep>%s' % (namespaceprefix_ , self.gds_format_integer(self.Cep, input_name='Cep'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Endereco':
            Endereco_ = child_.text
            Endereco_ = self.gds_validate_string(Endereco_, node, 'Endereco')
            self.Endereco = Endereco_
            # validate type tsEndereco
            self.validate_tsEndereco(self.Endereco)
        elif nodeName_ == 'Numero':
            Numero_ = child_.text
            Numero_ = self.gds_validate_string(Numero_, node, 'Numero')
            self.Numero = Numero_
            # validate type tsNumeroEndereco
            self.validate_tsNumeroEndereco(self.Numero)
        elif nodeName_ == 'Complemento':
            Complemento_ = child_.text
            Complemento_ = self.gds_validate_string(Complemento_, node, 'Complemento')
            self.Complemento = Complemento_
            # validate type tsComplementoEndereco
            self.validate_tsComplementoEndereco(self.Complemento)
        elif nodeName_ == 'Bairro':
            Bairro_ = child_.text
            Bairro_ = self.gds_validate_string(Bairro_, node, 'Bairro')
            self.Bairro = Bairro_
            # validate type tsBairro
            self.validate_tsBairro(self.Bairro)
        elif nodeName_ == 'CodigoMunicipio' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            # validate type tsCodigoMunicipioIbge
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
        elif nodeName_ == 'Uf':
            Uf_ = child_.text
            Uf_ = self.gds_validate_string(Uf_, node, 'Uf')
            self.Uf = Uf_
            # validate type tsUf
            self.validate_tsUf(self.Uf)
        elif nodeName_ == 'Cep' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Cep')
            self.Cep = ival_
            # validate type tsCep
            self.validate_tsCep(self.Cep)
# end class tcEndereco


class tcContato(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Telefone=None, Email=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Telefone = Telefone
        self.validate_tsTelefone(self.Telefone)
        self.Email = Email
        self.validate_tsEmail(self.Email)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcContato)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcContato.subclass:
            return tcContato.subclass(*args_, **kwargs_)
        else:
            return tcContato(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsTelefone(self, value):
        # Validate type tsTelefone, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsTelefone' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsTelefone' % {"value" : value.encode("utf-8")} )
    def validate_tsEmail(self, value):
        # Validate type tsEmail, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 80:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsEmail' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsEmail' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Telefone is not None or
            self.Email is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcContato', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcContato')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcContato')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcContato', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcContato'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcContato', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Telefone is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTelefone>%s</%sTelefone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Telefone), input_name='Telefone')), namespaceprefix_ , eol_))
        if self.Email is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEmail>%s</%sEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Email), input_name='Email')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Telefone':
            Telefone_ = child_.text
            Telefone_ = self.gds_validate_string(Telefone_, node, 'Telefone')
            self.Telefone = Telefone_
            # validate type tsTelefone
            self.validate_tsTelefone(self.Telefone)
        elif nodeName_ == 'Email':
            Email_ = child_.text
            Email_ = self.gds_validate_string(Email_, node, 'Email')
            self.Email = Email_
            # validate type tsEmail
            self.validate_tsEmail(self.Email)
# end class tcContato


class tcIdentificacaoOrgaoGerador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CodigoMunicipio=None, Uf=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CodigoMunicipio = CodigoMunicipio
        self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
        self.Uf = Uf
        self.validate_tsUf(self.Uf)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoOrgaoGerador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoOrgaoGerador.subclass:
            return tcIdentificacaoOrgaoGerador.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoOrgaoGerador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCodigoMunicipioIbge' % {"value" : value} )
    def validate_tsUf(self, value):
        # Validate type tsUf, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsUf' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CodigoMunicipio is not None or
            self.Uf is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoOrgaoGerador', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoOrgaoGerador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoOrgaoGerador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoOrgaoGerador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoOrgaoGerador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoOrgaoGerador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespaceprefix_ , eol_))
        if self.Uf is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUf>%s</%sUf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Uf), input_name='Uf')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodigoMunicipio' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            # validate type tsCodigoMunicipioIbge
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
        elif nodeName_ == 'Uf':
            Uf_ = child_.text
            Uf_ = self.gds_validate_string(Uf_, node, 'Uf')
            self.Uf = Uf_
            # validate type tsUf
            self.validate_tsUf(self.Uf)
# end class tcIdentificacaoOrgaoGerador


class tcIdentificacaoRps(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Numero=None, Serie=None, Tipo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Numero = Numero
        self.validate_tsNumeroRps(self.Numero)
        self.Serie = Serie
        self.validate_tsSerieRps(self.Serie)
        self.Tipo = Tipo
        self.validate_tsTipoRps(self.Tipo)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoRps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoRps.subclass:
            return tcIdentificacaoRps.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroRps(self, value):
        # Validate type tsNumeroRps, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroRps' % {"value" : value} )
    def validate_tsSerieRps(self, value):
        # Validate type tsSerieRps, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsSerieRps' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsSerieRps' % {"value" : value.encode("utf-8")} )
    def validate_tsTipoRps(self, value):
        # Validate type tsTipoRps, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsTipoRps_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsTipoRps_patterns_, ))
    validate_tsTipoRps_patterns_ = [['^1|2|3$']]
    def hasContent_(self):
        if (
            self.Numero is not None or
            self.Serie is not None or
            self.Tipo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoRps', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoRps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoRps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoRps'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespaceprefix_ , self.gds_format_integer(self.Numero, input_name='Numero'), namespaceprefix_ , eol_))
        if self.Serie is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSerie>%s</%sSerie>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Serie), input_name='Serie')), namespaceprefix_ , eol_))
        if self.Tipo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTipo>%s</%sTipo>%s' % (namespaceprefix_ , self.gds_format_integer(self.Tipo, input_name='Tipo'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Numero' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Numero')
            self.Numero = ival_
            # validate type tsNumeroRps
            self.validate_tsNumeroRps(self.Numero)
        elif nodeName_ == 'Serie':
            Serie_ = child_.text
            Serie_ = self.gds_validate_string(Serie_, node, 'Serie')
            self.Serie = Serie_
            # validate type tsSerieRps
            self.validate_tsSerieRps(self.Serie)
        elif nodeName_ == 'Tipo' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Tipo')
            self.Tipo = ival_
            # validate type tsTipoRps
            self.validate_tsTipoRps(self.Tipo)
# end class tcIdentificacaoRps


class tcIdentificacaoPrestador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Cnpj=None, InscricaoMunicipal=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Cnpj = Cnpj
        self.validate_tsCnpj(self.Cnpj)
        self.InscricaoMunicipal = InscricaoMunicipal
        self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoPrestador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoPrestador.subclass:
            return tcIdentificacaoPrestador.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCnpj(self, value):
        # Validate type tsCnpj, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 14:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsCnpj' % {"value" : value.encode("utf-8")} )
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoPrestador', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoPrestador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoPrestador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoPrestador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoPrestador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cnpj), input_name='Cnpj')), namespaceprefix_ , eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InscricaoMunicipal), input_name='InscricaoMunicipal')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            # validate type tsCnpj
            self.validate_tsCnpj(self.Cnpj)
        elif nodeName_ == 'InscricaoMunicipal':
            InscricaoMunicipal_ = child_.text
            InscricaoMunicipal_ = self.gds_validate_string(InscricaoMunicipal_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = InscricaoMunicipal_
            # validate type tsInscricaoMunicipal
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
# end class tcIdentificacaoPrestador


class tcIdentificacaoTomador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CpfCnpj=None, InscricaoMunicipal=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CpfCnpj = CpfCnpj
        self.InscricaoMunicipal = InscricaoMunicipal
        self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoTomador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoTomador.subclass:
            return tcIdentificacaoTomador.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoTomador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CpfCnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoTomador', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoTomador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoTomador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoTomador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoTomador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoTomador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CpfCnpj is not None:
            self.CpfCnpj.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CpfCnpj', pretty_print=pretty_print)
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InscricaoMunicipal), input_name='InscricaoMunicipal')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CpfCnpj':
            obj_ = tcCpfCnpj.factory(parent_object_=self)
            obj_.build(child_)
            self.CpfCnpj = obj_
            obj_.original_tagname_ = 'CpfCnpj'
        elif nodeName_ == 'InscricaoMunicipal':
            InscricaoMunicipal_ = child_.text
            InscricaoMunicipal_ = self.gds_validate_string(InscricaoMunicipal_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = InscricaoMunicipal_
            # validate type tsInscricaoMunicipal
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
# end class tcIdentificacaoTomador


class tcDadosTomador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdentificacaoTomador=None, RazaoSocial=None, Endereco=None, Contato=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.IdentificacaoTomador = IdentificacaoTomador
        self.RazaoSocial = RazaoSocial
        self.validate_tsRazaoSocial(self.RazaoSocial)
        self.Endereco = Endereco
        self.Contato = Contato
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcDadosTomador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcDadosTomador.subclass:
            return tcDadosTomador.subclass(*args_, **kwargs_)
        else:
            return tcDadosTomador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsRazaoSocial(self, value):
        # Validate type tsRazaoSocial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 115:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdentificacaoTomador is not None or
            self.RazaoSocial is not None or
            self.Endereco is not None or
            self.Contato is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosTomador', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcDadosTomador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcDadosTomador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcDadosTomador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcDadosTomador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosTomador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoTomador is not None:
            self.IdentificacaoTomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoTomador', pretty_print=pretty_print)
        if self.RazaoSocial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocial>%s</%sRazaoSocial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocial), input_name='RazaoSocial')), namespaceprefix_ , eol_))
        if self.Endereco is not None:
            self.Endereco.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Endereco', pretty_print=pretty_print)
        if self.Contato is not None:
            self.Contato.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contato', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoTomador':
            obj_ = tcIdentificacaoTomador.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoTomador = obj_
            obj_.original_tagname_ = 'IdentificacaoTomador'
        elif nodeName_ == 'RazaoSocial':
            RazaoSocial_ = child_.text
            RazaoSocial_ = self.gds_validate_string(RazaoSocial_, node, 'RazaoSocial')
            self.RazaoSocial = RazaoSocial_
            # validate type tsRazaoSocial
            self.validate_tsRazaoSocial(self.RazaoSocial)
        elif nodeName_ == 'Endereco':
            obj_ = tcEndereco.factory(parent_object_=self)
            obj_.build(child_)
            self.Endereco = obj_
            obj_.original_tagname_ = 'Endereco'
        elif nodeName_ == 'Contato':
            obj_ = tcContato.factory(parent_object_=self)
            obj_.build(child_)
            self.Contato = obj_
            obj_.original_tagname_ = 'Contato'
# end class tcDadosTomador


class tcIdentificacaoIntermediarioServico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RazaoSocial=None, CpfCnpj=None, InscricaoMunicipal=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RazaoSocial = RazaoSocial
        self.validate_tsRazaoSocial(self.RazaoSocial)
        self.CpfCnpj = CpfCnpj
        self.InscricaoMunicipal = InscricaoMunicipal
        self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoIntermediarioServico)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoIntermediarioServico.subclass:
            return tcIdentificacaoIntermediarioServico.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoIntermediarioServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsRazaoSocial(self, value):
        # Validate type tsRazaoSocial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 115:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.RazaoSocial is not None or
            self.CpfCnpj is not None or
            self.InscricaoMunicipal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoIntermediarioServico', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoIntermediarioServico')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoIntermediarioServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoIntermediarioServico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoIntermediarioServico'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoIntermediarioServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RazaoSocial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocial>%s</%sRazaoSocial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocial), input_name='RazaoSocial')), namespaceprefix_ , eol_))
        if self.CpfCnpj is not None:
            self.CpfCnpj.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CpfCnpj', pretty_print=pretty_print)
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InscricaoMunicipal), input_name='InscricaoMunicipal')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RazaoSocial':
            RazaoSocial_ = child_.text
            RazaoSocial_ = self.gds_validate_string(RazaoSocial_, node, 'RazaoSocial')
            self.RazaoSocial = RazaoSocial_
            # validate type tsRazaoSocial
            self.validate_tsRazaoSocial(self.RazaoSocial)
        elif nodeName_ == 'CpfCnpj':
            obj_ = tcCpfCnpj.factory(parent_object_=self)
            obj_.build(child_)
            self.CpfCnpj = obj_
            obj_.original_tagname_ = 'CpfCnpj'
        elif nodeName_ == 'InscricaoMunicipal':
            InscricaoMunicipal_ = child_.text
            InscricaoMunicipal_ = self.gds_validate_string(InscricaoMunicipal_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = InscricaoMunicipal_
            # validate type tsInscricaoMunicipal
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
# end class tcIdentificacaoIntermediarioServico


class tcValores(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ValorServicos=None, ValorDeducoes=None, ValorPis=None, ValorCofins=None, ValorInss=None, ValorIr=None, ValorCsll=None, IssRetido=None, ValorIss=None, ValorIssRetido=None, OutrasRetencoes=None, BaseCalculo=None, Aliquota=None, ValorLiquidoNfse=None, DescontoIncondicionado=None, DescontoCondicionado=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ValorServicos = ValorServicos
        self.validate_tsValor(self.ValorServicos)
        self.ValorDeducoes = ValorDeducoes
        self.validate_tsValor(self.ValorDeducoes)
        self.ValorPis = ValorPis
        self.validate_tsValor(self.ValorPis)
        self.ValorCofins = ValorCofins
        self.validate_tsValor(self.ValorCofins)
        self.ValorInss = ValorInss
        self.validate_tsValor(self.ValorInss)
        self.ValorIr = ValorIr
        self.validate_tsValor(self.ValorIr)
        self.ValorCsll = ValorCsll
        self.validate_tsValor(self.ValorCsll)
        self.IssRetido = IssRetido
        self.validate_tsSimNao(self.IssRetido)
        self.ValorIss = ValorIss
        self.validate_tsValor(self.ValorIss)
        self.ValorIssRetido = ValorIssRetido
        self.validate_tsValor(self.ValorIssRetido)
        self.OutrasRetencoes = OutrasRetencoes
        self.validate_tsValor(self.OutrasRetencoes)
        self.BaseCalculo = BaseCalculo
        self.validate_tsValor(self.BaseCalculo)
        self.Aliquota = Aliquota
        self.validate_tsAliquota(self.Aliquota)
        self.ValorLiquidoNfse = ValorLiquidoNfse
        self.validate_tsValor(self.ValorLiquidoNfse)
        self.DescontoIncondicionado = DescontoIncondicionado
        self.validate_tsValor(self.DescontoIncondicionado)
        self.DescontoCondicionado = DescontoCondicionado
        self.validate_tsValor(self.DescontoCondicionado)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcValores)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcValores.subclass:
            return tcValores.subclass(*args_, **kwargs_)
        else:
            return tcValores(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsValor(self, value):
        # Validate type tsValor, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tsValor' % {"value" : value} )
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsValor' % {"value" : value} )
    def validate_tsSimNao(self, value):
        # Validate type tsSimNao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsSimNao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsSimNao_patterns_, ))
    validate_tsSimNao_patterns_ = [['^1|2$']]
    def validate_tsAliquota(self, value):
        # Validate type tsAliquota, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tsAliquota' % {"value" : value} )
            if len(str(value)) >= 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsAliquota' % {"value" : value} )
    def hasContent_(self):
        if (
            self.ValorServicos is not None or
            self.ValorDeducoes is not None or
            self.ValorPis is not None or
            self.ValorCofins is not None or
            self.ValorInss is not None or
            self.ValorIr is not None or
            self.ValorCsll is not None or
            self.IssRetido is not None or
            self.ValorIss is not None or
            self.ValorIssRetido is not None or
            self.OutrasRetencoes is not None or
            self.BaseCalculo is not None or
            self.Aliquota is not None or
            self.ValorLiquidoNfse is not None or
            self.DescontoIncondicionado is not None or
            self.DescontoCondicionado is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcValores', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcValores')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcValores')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcValores', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcValores'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcValores', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ValorServicos is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorServicos>%s</%sValorServicos>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorServicos, input_name='ValorServicos'), namespaceprefix_ , eol_))
        if self.ValorDeducoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorDeducoes>%s</%sValorDeducoes>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorDeducoes, input_name='ValorDeducoes'), namespaceprefix_ , eol_))
        if self.ValorPis is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorPis>%s</%sValorPis>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorPis, input_name='ValorPis'), namespaceprefix_ , eol_))
        if self.ValorCofins is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCofins>%s</%sValorCofins>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCofins, input_name='ValorCofins'), namespaceprefix_ , eol_))
        if self.ValorInss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorInss>%s</%sValorInss>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorInss, input_name='ValorInss'), namespaceprefix_ , eol_))
        if self.ValorIr is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIr>%s</%sValorIr>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorIr, input_name='ValorIr'), namespaceprefix_ , eol_))
        if self.ValorCsll is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCsll>%s</%sValorCsll>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCsll, input_name='ValorCsll'), namespaceprefix_ , eol_))
        if self.IssRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIssRetido>%s</%sIssRetido>%s' % (namespaceprefix_ , self.gds_format_integer(self.IssRetido, input_name='IssRetido'), namespaceprefix_ , eol_))
        if self.ValorIss is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIss>%s</%sValorIss>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorIss, input_name='ValorIss'), namespaceprefix_ , eol_))
        if self.ValorIssRetido is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorIssRetido>%s</%sValorIssRetido>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorIssRetido, input_name='ValorIssRetido'), namespaceprefix_ , eol_))
        if self.OutrasRetencoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutrasRetencoes>%s</%sOutrasRetencoes>%s' % (namespaceprefix_ , self.gds_format_float(self.OutrasRetencoes, input_name='OutrasRetencoes'), namespaceprefix_ , eol_))
        if self.BaseCalculo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sBaseCalculo>%s</%sBaseCalculo>%s' % (namespaceprefix_ , self.gds_format_float(self.BaseCalculo, input_name='BaseCalculo'), namespaceprefix_ , eol_))
        if self.Aliquota is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAliquota>%s</%sAliquota>%s' % (namespaceprefix_ , self.gds_format_float(self.Aliquota, input_name='Aliquota'), namespaceprefix_ , eol_))
        if self.ValorLiquidoNfse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorLiquidoNfse>%s</%sValorLiquidoNfse>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorLiquidoNfse, input_name='ValorLiquidoNfse'), namespaceprefix_ , eol_))
        if self.DescontoIncondicionado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescontoIncondicionado>%s</%sDescontoIncondicionado>%s' % (namespaceprefix_ , self.gds_format_float(self.DescontoIncondicionado, input_name='DescontoIncondicionado'), namespaceprefix_ , eol_))
        if self.DescontoCondicionado is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDescontoCondicionado>%s</%sDescontoCondicionado>%s' % (namespaceprefix_ , self.gds_format_float(self.DescontoCondicionado, input_name='DescontoCondicionado'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ValorServicos' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorServicos')
            self.ValorServicos = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorServicos)
        elif nodeName_ == 'ValorDeducoes' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorDeducoes')
            self.ValorDeducoes = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorDeducoes)
        elif nodeName_ == 'ValorPis' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorPis')
            self.ValorPis = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorPis)
        elif nodeName_ == 'ValorCofins' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCofins')
            self.ValorCofins = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorCofins)
        elif nodeName_ == 'ValorInss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorInss')
            self.ValorInss = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorInss)
        elif nodeName_ == 'ValorIr' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIr')
            self.ValorIr = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorIr)
        elif nodeName_ == 'ValorCsll' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCsll')
            self.ValorCsll = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorCsll)
        elif nodeName_ == 'IssRetido' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IssRetido')
            self.IssRetido = ival_
            # validate type tsSimNao
            self.validate_tsSimNao(self.IssRetido)
        elif nodeName_ == 'ValorIss' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIss')
            self.ValorIss = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorIss)
        elif nodeName_ == 'ValorIssRetido' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorIssRetido')
            self.ValorIssRetido = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorIssRetido)
        elif nodeName_ == 'OutrasRetencoes' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'OutrasRetencoes')
            self.OutrasRetencoes = fval_
            # validate type tsValor
            self.validate_tsValor(self.OutrasRetencoes)
        elif nodeName_ == 'BaseCalculo' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'BaseCalculo')
            self.BaseCalculo = fval_
            # validate type tsValor
            self.validate_tsValor(self.BaseCalculo)
        elif nodeName_ == 'Aliquota' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'Aliquota')
            self.Aliquota = fval_
            # validate type tsAliquota
            self.validate_tsAliquota(self.Aliquota)
        elif nodeName_ == 'ValorLiquidoNfse' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorLiquidoNfse')
            self.ValorLiquidoNfse = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorLiquidoNfse)
        elif nodeName_ == 'DescontoIncondicionado' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DescontoIncondicionado')
            self.DescontoIncondicionado = fval_
            # validate type tsValor
            self.validate_tsValor(self.DescontoIncondicionado)
        elif nodeName_ == 'DescontoCondicionado' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'DescontoCondicionado')
            self.DescontoCondicionado = fval_
            # validate type tsValor
            self.validate_tsValor(self.DescontoCondicionado)
# end class tcValores


class tcDadosServico(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Valores=None, ItemListaServico=None, CodigoCnae=None, CodigoTributacaoMunicipio=None, Discriminacao=None, CodigoMunicipio=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Valores = Valores
        self.ItemListaServico = ItemListaServico
        self.validate_tsItemListaServico(self.ItemListaServico)
        self.CodigoCnae = CodigoCnae
        self.validate_tsCodigoCnae(self.CodigoCnae)
        self.CodigoTributacaoMunicipio = CodigoTributacaoMunicipio
        self.validate_tsCodigoTributacao(self.CodigoTributacaoMunicipio)
        self.Discriminacao = Discriminacao
        self.validate_tsDiscriminacao(self.Discriminacao)
        self.CodigoMunicipio = CodigoMunicipio
        self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcDadosServico)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcDadosServico.subclass:
            return tcDadosServico.subclass(*args_, **kwargs_)
        else:
            return tcDadosServico(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsItemListaServico(self, value):
        # Validate type tsItemListaServico, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 5:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsItemListaServico' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsItemListaServico' % {"value" : value.encode("utf-8")} )
    def validate_tsCodigoCnae(self, value):
        # Validate type tsCodigoCnae, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCodigoCnae' % {"value" : value} )
    def validate_tsCodigoTributacao(self, value):
        # Validate type tsCodigoTributacao, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 20:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoTributacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoTributacao' % {"value" : value.encode("utf-8")} )
    def validate_tsDiscriminacao(self, value):
        # Validate type tsDiscriminacao, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 2000:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsDiscriminacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsDiscriminacao' % {"value" : value.encode("utf-8")} )
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCodigoMunicipioIbge' % {"value" : value} )
    def hasContent_(self):
        if (
            self.Valores is not None or
            self.ItemListaServico is not None or
            self.CodigoCnae is not None or
            self.CodigoTributacaoMunicipio is not None or
            self.Discriminacao is not None or
            self.CodigoMunicipio is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosServico', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcDadosServico')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcDadosServico')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcDadosServico', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcDadosServico'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosServico', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Valores is not None:
            self.Valores.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Valores', pretty_print=pretty_print)
        if self.ItemListaServico is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sItemListaServico>%s</%sItemListaServico>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ItemListaServico), input_name='ItemListaServico')), namespaceprefix_ , eol_))
        if self.CodigoCnae is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCnae>%s</%sCodigoCnae>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoCnae, input_name='CodigoCnae'), namespaceprefix_ , eol_))
        if self.CodigoTributacaoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoTributacaoMunicipio>%s</%sCodigoTributacaoMunicipio>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodigoTributacaoMunicipio), input_name='CodigoTributacaoMunicipio')), namespaceprefix_ , eol_))
        if self.Discriminacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDiscriminacao>%s</%sDiscriminacao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Discriminacao), input_name='Discriminacao')), namespaceprefix_ , eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Valores':
            obj_ = tcValores.factory(parent_object_=self)
            obj_.build(child_)
            self.Valores = obj_
            obj_.original_tagname_ = 'Valores'
        elif nodeName_ == 'ItemListaServico':
            ItemListaServico_ = child_.text
            ItemListaServico_ = self.gds_validate_string(ItemListaServico_, node, 'ItemListaServico')
            self.ItemListaServico = ItemListaServico_
            # validate type tsItemListaServico
            self.validate_tsItemListaServico(self.ItemListaServico)
        elif nodeName_ == 'CodigoCnae' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoCnae')
            self.CodigoCnae = ival_
            # validate type tsCodigoCnae
            self.validate_tsCodigoCnae(self.CodigoCnae)
        elif nodeName_ == 'CodigoTributacaoMunicipio':
            CodigoTributacaoMunicipio_ = child_.text
            CodigoTributacaoMunicipio_ = self.gds_validate_string(CodigoTributacaoMunicipio_, node, 'CodigoTributacaoMunicipio')
            self.CodigoTributacaoMunicipio = CodigoTributacaoMunicipio_
            # validate type tsCodigoTributacao
            self.validate_tsCodigoTributacao(self.CodigoTributacaoMunicipio)
        elif nodeName_ == 'Discriminacao':
            Discriminacao_ = child_.text
            Discriminacao_ = self.gds_validate_string(Discriminacao_, node, 'Discriminacao')
            self.Discriminacao = Discriminacao_
            # validate type tsDiscriminacao
            self.validate_tsDiscriminacao(self.Discriminacao)
        elif nodeName_ == 'CodigoMunicipio' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            # validate type tsCodigoMunicipioIbge
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
# end class tcDadosServico


class tcDadosConstrucaoCivil(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CodigoObra=None, Art=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CodigoObra = CodigoObra
        self.validate_tsCodigoObra(self.CodigoObra)
        self.Art = Art
        self.validate_tsArt(self.Art)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcDadosConstrucaoCivil)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcDadosConstrucaoCivil.subclass:
            return tcDadosConstrucaoCivil.subclass(*args_, **kwargs_)
        else:
            return tcDadosConstrucaoCivil(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCodigoObra(self, value):
        # Validate type tsCodigoObra, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoObra' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoObra' % {"value" : value.encode("utf-8")} )
    def validate_tsArt(self, value):
        # Validate type tsArt, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsArt' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsArt' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.CodigoObra is not None or
            self.Art is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosConstrucaoCivil', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcDadosConstrucaoCivil')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcDadosConstrucaoCivil')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcDadosConstrucaoCivil', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcDadosConstrucaoCivil'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosConstrucaoCivil', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CodigoObra is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoObra>%s</%sCodigoObra>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodigoObra), input_name='CodigoObra')), namespaceprefix_ , eol_))
        if self.Art is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sArt>%s</%sArt>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Art), input_name='Art')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CodigoObra':
            CodigoObra_ = child_.text
            CodigoObra_ = self.gds_validate_string(CodigoObra_, node, 'CodigoObra')
            self.CodigoObra = CodigoObra_
            # validate type tsCodigoObra
            self.validate_tsCodigoObra(self.CodigoObra)
        elif nodeName_ == 'Art':
            Art_ = child_.text
            Art_ = self.gds_validate_string(Art_, node, 'Art')
            self.Art = Art_
            # validate type tsArt
            self.validate_tsArt(self.Art)
# end class tcDadosConstrucaoCivil


class tcDadosPrestador(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdentificacaoPrestador=None, RazaoSocial=None, NomeFantasia=None, Endereco=None, Contato=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.IdentificacaoPrestador = IdentificacaoPrestador
        self.RazaoSocial = RazaoSocial
        self.validate_tsRazaoSocial(self.RazaoSocial)
        self.NomeFantasia = NomeFantasia
        self.validate_tsNomeFantasia(self.NomeFantasia)
        self.Endereco = Endereco
        self.Contato = Contato
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcDadosPrestador)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcDadosPrestador.subclass:
            return tcDadosPrestador.subclass(*args_, **kwargs_)
        else:
            return tcDadosPrestador(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsRazaoSocial(self, value):
        # Validate type tsRazaoSocial, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 115:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsRazaoSocial' % {"value" : value.encode("utf-8")} )
    def validate_tsNomeFantasia(self, value):
        # Validate type tsNomeFantasia, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 60:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsNomeFantasia' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsNomeFantasia' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdentificacaoPrestador is not None or
            self.RazaoSocial is not None or
            self.NomeFantasia is not None or
            self.Endereco is not None or
            self.Contato is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosPrestador', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcDadosPrestador')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcDadosPrestador')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcDadosPrestador', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcDadosPrestador'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcDadosPrestador', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoPrestador is not None:
            self.IdentificacaoPrestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoPrestador', pretty_print=pretty_print)
        if self.RazaoSocial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRazaoSocial>%s</%sRazaoSocial>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.RazaoSocial), input_name='RazaoSocial')), namespaceprefix_ , eol_))
        if self.NomeFantasia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNomeFantasia>%s</%sNomeFantasia>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.NomeFantasia), input_name='NomeFantasia')), namespaceprefix_ , eol_))
        if self.Endereco is not None:
            self.Endereco.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Endereco', pretty_print=pretty_print)
        if self.Contato is not None:
            self.Contato.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Contato', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoPrestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoPrestador = obj_
            obj_.original_tagname_ = 'IdentificacaoPrestador'
        elif nodeName_ == 'RazaoSocial':
            RazaoSocial_ = child_.text
            RazaoSocial_ = self.gds_validate_string(RazaoSocial_, node, 'RazaoSocial')
            self.RazaoSocial = RazaoSocial_
            # validate type tsRazaoSocial
            self.validate_tsRazaoSocial(self.RazaoSocial)
        elif nodeName_ == 'NomeFantasia':
            NomeFantasia_ = child_.text
            NomeFantasia_ = self.gds_validate_string(NomeFantasia_, node, 'NomeFantasia')
            self.NomeFantasia = NomeFantasia_
            # validate type tsNomeFantasia
            self.validate_tsNomeFantasia(self.NomeFantasia)
        elif nodeName_ == 'Endereco':
            obj_ = tcEndereco.factory(parent_object_=self)
            obj_.build(child_)
            self.Endereco = obj_
            obj_.original_tagname_ = 'Endereco'
        elif nodeName_ == 'Contato':
            obj_ = tcContato.factory(parent_object_=self)
            obj_.build(child_)
            self.Contato = obj_
            obj_.original_tagname_ = 'Contato'
# end class tcDadosPrestador


class tcInfRps(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, IdentificacaoRps=None, DataEmissao=None, NaturezaOperacao=None, RegimeEspecialTributacao=None, OptanteSimplesNacional=None, IncentivadorCultural=None, Status=None, RpsSubstituido=None, Servico=None, Prestador=None, Tomador=None, IntermediarioServico=None, ContrucaoCivil=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.IdentificacaoRps = IdentificacaoRps
        if isinstance(DataEmissao, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissao, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataEmissao
        self.DataEmissao = initvalue_
        self.NaturezaOperacao = NaturezaOperacao
        self.validate_tsNaturezaOperacao(self.NaturezaOperacao)
        self.RegimeEspecialTributacao = RegimeEspecialTributacao
        self.validate_tsRegimeEspecialTributacao(self.RegimeEspecialTributacao)
        self.OptanteSimplesNacional = OptanteSimplesNacional
        self.validate_tsSimNao(self.OptanteSimplesNacional)
        self.IncentivadorCultural = IncentivadorCultural
        self.validate_tsSimNao(self.IncentivadorCultural)
        self.Status = Status
        self.validate_tsStatusRps(self.Status)
        self.RpsSubstituido = RpsSubstituido
        self.Servico = Servico
        self.Prestador = Prestador
        self.Tomador = Tomador
        self.IntermediarioServico = IntermediarioServico
        self.ContrucaoCivil = ContrucaoCivil
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcInfRps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcInfRps.subclass:
            return tcInfRps.subclass(*args_, **kwargs_)
        else:
            return tcInfRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNaturezaOperacao(self, value):
        # Validate type tsNaturezaOperacao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsNaturezaOperacao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsNaturezaOperacao_patterns_, ))
    validate_tsNaturezaOperacao_patterns_ = [['^1|2|3|4|5|6$']]
    def validate_tsRegimeEspecialTributacao(self, value):
        # Validate type tsRegimeEspecialTributacao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsRegimeEspecialTributacao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsRegimeEspecialTributacao_patterns_, ))
    validate_tsRegimeEspecialTributacao_patterns_ = [['^1|2|3|4|5|6$']]
    def validate_tsSimNao(self, value):
        # Validate type tsSimNao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsSimNao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsSimNao_patterns_, ))
    validate_tsSimNao_patterns_ = [['^1|2$']]
    def validate_tsStatusRps(self, value):
        # Validate type tsStatusRps, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsStatusRps_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsStatusRps_patterns_, ))
    validate_tsStatusRps_patterns_ = [['^1|2$']]
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdentificacaoRps is not None or
            self.DataEmissao is not None or
            self.NaturezaOperacao is not None or
            self.RegimeEspecialTributacao is not None or
            self.OptanteSimplesNacional is not None or
            self.IncentivadorCultural is not None or
            self.Status is not None or
            self.RpsSubstituido is not None or
            self.Servico is not None or
            self.Prestador is not None or
            self.Tomador is not None or
            self.IntermediarioServico is not None or
            self.ContrucaoCivil is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfRps', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcInfRps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcInfRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcInfRps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcInfRps'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoRps is not None:
            self.IdentificacaoRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoRps', pretty_print=pretty_print)
        if self.DataEmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissao>%s</%sDataEmissao>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataEmissao, input_name='DataEmissao'), namespaceprefix_ , eol_))
        if self.NaturezaOperacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNaturezaOperacao>%s</%sNaturezaOperacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.NaturezaOperacao, input_name='NaturezaOperacao'), namespaceprefix_ , eol_))
        if self.RegimeEspecialTributacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegimeEspecialTributacao>%s</%sRegimeEspecialTributacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.RegimeEspecialTributacao, input_name='RegimeEspecialTributacao'), namespaceprefix_ , eol_))
        if self.OptanteSimplesNacional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptanteSimplesNacional>%s</%sOptanteSimplesNacional>%s' % (namespaceprefix_ , self.gds_format_integer(self.OptanteSimplesNacional, input_name='OptanteSimplesNacional'), namespaceprefix_ , eol_))
        if self.IncentivadorCultural is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncentivadorCultural>%s</%sIncentivadorCultural>%s' % (namespaceprefix_ , self.gds_format_integer(self.IncentivadorCultural, input_name='IncentivadorCultural'), namespaceprefix_ , eol_))
        if self.Status is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sStatus>%s</%sStatus>%s' % (namespaceprefix_ , self.gds_format_integer(self.Status, input_name='Status'), namespaceprefix_ , eol_))
        if self.RpsSubstituido is not None:
            self.RpsSubstituido.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RpsSubstituido', pretty_print=pretty_print)
        if self.Servico is not None:
            self.Servico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Servico', pretty_print=pretty_print)
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Prestador', pretty_print=pretty_print)
        if self.Tomador is not None:
            self.Tomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tomador', pretty_print=pretty_print)
        if self.IntermediarioServico is not None:
            self.IntermediarioServico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IntermediarioServico', pretty_print=pretty_print)
        if self.ContrucaoCivil is not None:
            self.ContrucaoCivil.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContrucaoCivil', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoRps':
            obj_ = tcIdentificacaoRps.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoRps = obj_
            obj_.original_tagname_ = 'IdentificacaoRps'
        elif nodeName_ == 'DataEmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataEmissao = dval_
        elif nodeName_ == 'NaturezaOperacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NaturezaOperacao')
            self.NaturezaOperacao = ival_
            # validate type tsNaturezaOperacao
            self.validate_tsNaturezaOperacao(self.NaturezaOperacao)
        elif nodeName_ == 'RegimeEspecialTributacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RegimeEspecialTributacao')
            self.RegimeEspecialTributacao = ival_
            # validate type tsRegimeEspecialTributacao
            self.validate_tsRegimeEspecialTributacao(self.RegimeEspecialTributacao)
        elif nodeName_ == 'OptanteSimplesNacional' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'OptanteSimplesNacional')
            self.OptanteSimplesNacional = ival_
            # validate type tsSimNao
            self.validate_tsSimNao(self.OptanteSimplesNacional)
        elif nodeName_ == 'IncentivadorCultural' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IncentivadorCultural')
            self.IncentivadorCultural = ival_
            # validate type tsSimNao
            self.validate_tsSimNao(self.IncentivadorCultural)
        elif nodeName_ == 'Status' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Status')
            self.Status = ival_
            # validate type tsStatusRps
            self.validate_tsStatusRps(self.Status)
        elif nodeName_ == 'RpsSubstituido':
            obj_ = tcIdentificacaoRps.factory(parent_object_=self)
            obj_.build(child_)
            self.RpsSubstituido = obj_
            obj_.original_tagname_ = 'RpsSubstituido'
        elif nodeName_ == 'Servico':
            obj_ = tcDadosServico.factory(parent_object_=self)
            obj_.build(child_)
            self.Servico = obj_
            obj_.original_tagname_ = 'Servico'
        elif nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.Prestador = obj_
            obj_.original_tagname_ = 'Prestador'
        elif nodeName_ == 'Tomador':
            obj_ = tcDadosTomador.factory(parent_object_=self)
            obj_.build(child_)
            self.Tomador = obj_
            obj_.original_tagname_ = 'Tomador'
        elif nodeName_ == 'IntermediarioServico':
            obj_ = tcIdentificacaoIntermediarioServico.factory(parent_object_=self)
            obj_.build(child_)
            self.IntermediarioServico = obj_
            obj_.original_tagname_ = 'IntermediarioServico'
        elif nodeName_ == 'ContrucaoCivil':
            obj_ = tcDadosConstrucaoCivil.factory(parent_object_=self)
            obj_.build(child_)
            self.ContrucaoCivil = obj_
            obj_.original_tagname_ = 'ContrucaoCivil'
# end class tcInfRps


class tcRps(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InfRps=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.InfRps = InfRps
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcRps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcRps.subclass:
            return tcRps.subclass(*args_, **kwargs_)
        else:
            return tcRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.InfRps is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcRps', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcRps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcRps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcRps'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfRps is not None:
            self.InfRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfRps', pretty_print=pretty_print)
        if self.Signature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Signature), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InfRps':
            obj_ = tcInfRps.factory(parent_object_=self)
            obj_.build(child_)
            self.InfRps = obj_
            obj_.original_tagname_ = 'InfRps'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature = Signature_
# end class tcRps


class tcIdentificacaoNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Numero=None, Cnpj=None, InscricaoMunicipal=None, CodigoMunicipio=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Numero = Numero
        self.validate_tsNumeroNfse(self.Numero)
        self.Cnpj = Cnpj
        self.validate_tsCnpj(self.Cnpj)
        self.InscricaoMunicipal = InscricaoMunicipal
        self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
        self.CodigoMunicipio = CodigoMunicipio
        self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcIdentificacaoNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcIdentificacaoNfse.subclass:
            return tcIdentificacaoNfse.subclass(*args_, **kwargs_)
        else:
            return tcIdentificacaoNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroNfse(self, value):
        # Validate type tsNumeroNfse, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroNfse' % {"value" : value} )
    def validate_tsCnpj(self, value):
        # Validate type tsCnpj, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 14:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsCnpj' % {"value" : value.encode("utf-8")} )
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
    def validate_tsCodigoMunicipioIbge(self, value):
        # Validate type tsCodigoMunicipioIbge, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 7:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsCodigoMunicipioIbge' % {"value" : value} )
    def hasContent_(self):
        if (
            self.Numero is not None or
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None or
            self.CodigoMunicipio is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcIdentificacaoNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcIdentificacaoNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcIdentificacaoNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcIdentificacaoNfse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcIdentificacaoNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespaceprefix_ , self.gds_format_integer(self.Numero, input_name='Numero'), namespaceprefix_ , eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cnpj), input_name='Cnpj')), namespaceprefix_ , eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InscricaoMunicipal), input_name='InscricaoMunicipal')), namespaceprefix_ , eol_))
        if self.CodigoMunicipio is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoMunicipio>%s</%sCodigoMunicipio>%s' % (namespaceprefix_ , self.gds_format_integer(self.CodigoMunicipio, input_name='CodigoMunicipio'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Numero' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Numero')
            self.Numero = ival_
            # validate type tsNumeroNfse
            self.validate_tsNumeroNfse(self.Numero)
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            # validate type tsCnpj
            self.validate_tsCnpj(self.Cnpj)
        elif nodeName_ == 'InscricaoMunicipal':
            InscricaoMunicipal_ = child_.text
            InscricaoMunicipal_ = self.gds_validate_string(InscricaoMunicipal_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = InscricaoMunicipal_
            # validate type tsInscricaoMunicipal
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
        elif nodeName_ == 'CodigoMunicipio' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'CodigoMunicipio')
            self.CodigoMunicipio = ival_
            # validate type tsCodigoMunicipioIbge
            self.validate_tsCodigoMunicipioIbge(self.CodigoMunicipio)
# end class tcIdentificacaoNfse


class tcInfNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Numero=None, CodigoVerificacao=None, DataEmissao=None, IdentificacaoRps=None, DataEmissaoRps=None, NaturezaOperacao=None, RegimeEspecialTributacao=None, OptanteSimplesNacional=None, IncentivadorCultural=None, Competencia=None, NfseSubstituida=None, OutrasInformacoes=None, Servico=None, ValorCredito=None, PrestadorServico=None, TomadorServico=None, IntermediarioServico=None, OrgaoGerador=None, ContrucaoCivil=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.Numero = Numero
        self.validate_tsNumeroNfse(self.Numero)
        self.CodigoVerificacao = CodigoVerificacao
        self.validate_tsCodigoVerificacao(self.CodigoVerificacao)
        if isinstance(DataEmissao, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissao, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataEmissao
        self.DataEmissao = initvalue_
        self.IdentificacaoRps = IdentificacaoRps
        if isinstance(DataEmissaoRps, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataEmissaoRps, '%Y-%m-%d').date()
        else:
            initvalue_ = DataEmissaoRps
        self.DataEmissaoRps = initvalue_
        self.NaturezaOperacao = NaturezaOperacao
        self.validate_tsNaturezaOperacao(self.NaturezaOperacao)
        self.RegimeEspecialTributacao = RegimeEspecialTributacao
        self.validate_tsRegimeEspecialTributacao(self.RegimeEspecialTributacao)
        self.OptanteSimplesNacional = OptanteSimplesNacional
        self.validate_tsSimNao(self.OptanteSimplesNacional)
        self.IncentivadorCultural = IncentivadorCultural
        self.validate_tsSimNao(self.IncentivadorCultural)
        if isinstance(Competencia, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(Competencia, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = Competencia
        self.Competencia = initvalue_
        self.NfseSubstituida = NfseSubstituida
        self.validate_tsNumeroNfse(self.NfseSubstituida)
        self.OutrasInformacoes = OutrasInformacoes
        self.validate_tsOutrasInformacoes(self.OutrasInformacoes)
        self.Servico = Servico
        self.ValorCredito = ValorCredito
        self.validate_tsValor(self.ValorCredito)
        self.PrestadorServico = PrestadorServico
        self.TomadorServico = TomadorServico
        self.IntermediarioServico = IntermediarioServico
        self.OrgaoGerador = OrgaoGerador
        self.ContrucaoCivil = ContrucaoCivil
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcInfNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcInfNfse.subclass:
            return tcInfNfse.subclass(*args_, **kwargs_)
        else:
            return tcInfNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroNfse(self, value):
        # Validate type tsNumeroNfse, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroNfse' % {"value" : value} )
    def validate_tsCodigoVerificacao(self, value):
        # Validate type tsCodigoVerificacao, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 9:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoVerificacao' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoVerificacao' % {"value" : value.encode("utf-8")} )
    def validate_tsNaturezaOperacao(self, value):
        # Validate type tsNaturezaOperacao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsNaturezaOperacao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsNaturezaOperacao_patterns_, ))
    validate_tsNaturezaOperacao_patterns_ = [['^1|2|3|4|5|6$']]
    def validate_tsRegimeEspecialTributacao(self, value):
        # Validate type tsRegimeEspecialTributacao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsRegimeEspecialTributacao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsRegimeEspecialTributacao_patterns_, ))
    validate_tsRegimeEspecialTributacao_patterns_ = [['^1|2|3|4|5|6$']]
    def validate_tsSimNao(self, value):
        # Validate type tsSimNao, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsSimNao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsSimNao_patterns_, ))
    validate_tsSimNao_patterns_ = [['^1|2$']]
    def validate_tsOutrasInformacoes(self, value):
        # Validate type tsOutrasInformacoes, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsOutrasInformacoes' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsOutrasInformacoes' % {"value" : value.encode("utf-8")} )
    def validate_tsValor(self, value):
        # Validate type tsValor, a restriction on xsd:decimal.
        if value is not None and Validate_simpletypes_:
            if value < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minInclusive restriction on tsValor' % {"value" : value} )
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsValor' % {"value" : value} )
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Numero is not None or
            self.CodigoVerificacao is not None or
            self.DataEmissao is not None or
            self.IdentificacaoRps is not None or
            self.DataEmissaoRps is not None or
            self.NaturezaOperacao is not None or
            self.RegimeEspecialTributacao is not None or
            self.OptanteSimplesNacional is not None or
            self.IncentivadorCultural is not None or
            self.Competencia is not None or
            self.NfseSubstituida is not None or
            self.OutrasInformacoes is not None or
            self.Servico is not None or
            self.ValorCredito is not None or
            self.PrestadorServico is not None or
            self.TomadorServico is not None or
            self.IntermediarioServico is not None or
            self.OrgaoGerador is not None or
            self.ContrucaoCivil is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcInfNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcInfNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcInfNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcInfNfse'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Numero is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumero>%s</%sNumero>%s' % (namespaceprefix_ , self.gds_format_integer(self.Numero, input_name='Numero'), namespaceprefix_ , eol_))
        if self.CodigoVerificacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoVerificacao>%s</%sCodigoVerificacao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodigoVerificacao), input_name='CodigoVerificacao')), namespaceprefix_ , eol_))
        if self.DataEmissao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissao>%s</%sDataEmissao>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataEmissao, input_name='DataEmissao'), namespaceprefix_ , eol_))
        if self.IdentificacaoRps is not None:
            self.IdentificacaoRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoRps', pretty_print=pretty_print)
        if self.DataEmissaoRps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataEmissaoRps>%s</%sDataEmissaoRps>%s' % (namespaceprefix_ , self.gds_format_date(self.DataEmissaoRps, input_name='DataEmissaoRps'), namespaceprefix_ , eol_))
        if self.NaturezaOperacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNaturezaOperacao>%s</%sNaturezaOperacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.NaturezaOperacao, input_name='NaturezaOperacao'), namespaceprefix_ , eol_))
        if self.RegimeEspecialTributacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRegimeEspecialTributacao>%s</%sRegimeEspecialTributacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.RegimeEspecialTributacao, input_name='RegimeEspecialTributacao'), namespaceprefix_ , eol_))
        if self.OptanteSimplesNacional is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOptanteSimplesNacional>%s</%sOptanteSimplesNacional>%s' % (namespaceprefix_ , self.gds_format_integer(self.OptanteSimplesNacional, input_name='OptanteSimplesNacional'), namespaceprefix_ , eol_))
        if self.IncentivadorCultural is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIncentivadorCultural>%s</%sIncentivadorCultural>%s' % (namespaceprefix_ , self.gds_format_integer(self.IncentivadorCultural, input_name='IncentivadorCultural'), namespaceprefix_ , eol_))
        if self.Competencia is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCompetencia>%s</%sCompetencia>%s' % (namespaceprefix_ , self.gds_format_datetime(self.Competencia, input_name='Competencia'), namespaceprefix_ , eol_))
        if self.NfseSubstituida is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNfseSubstituida>%s</%sNfseSubstituida>%s' % (namespaceprefix_ , self.gds_format_integer(self.NfseSubstituida, input_name='NfseSubstituida'), namespaceprefix_ , eol_))
        if self.OutrasInformacoes is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOutrasInformacoes>%s</%sOutrasInformacoes>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OutrasInformacoes), input_name='OutrasInformacoes')), namespaceprefix_ , eol_))
        if self.Servico is not None:
            self.Servico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Servico', pretty_print=pretty_print)
        if self.ValorCredito is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sValorCredito>%s</%sValorCredito>%s' % (namespaceprefix_ , self.gds_format_float(self.ValorCredito, input_name='ValorCredito'), namespaceprefix_ , eol_))
        if self.PrestadorServico is not None:
            self.PrestadorServico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PrestadorServico', pretty_print=pretty_print)
        if self.TomadorServico is not None:
            self.TomadorServico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='TomadorServico', pretty_print=pretty_print)
        if self.IntermediarioServico is not None:
            self.IntermediarioServico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IntermediarioServico', pretty_print=pretty_print)
        if self.OrgaoGerador is not None:
            self.OrgaoGerador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='OrgaoGerador', pretty_print=pretty_print)
        if self.ContrucaoCivil is not None:
            self.ContrucaoCivil.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ContrucaoCivil', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Numero' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'Numero')
            self.Numero = ival_
            # validate type tsNumeroNfse
            self.validate_tsNumeroNfse(self.Numero)
        elif nodeName_ == 'CodigoVerificacao':
            CodigoVerificacao_ = child_.text
            CodigoVerificacao_ = self.gds_validate_string(CodigoVerificacao_, node, 'CodigoVerificacao')
            self.CodigoVerificacao = CodigoVerificacao_
            # validate type tsCodigoVerificacao
            self.validate_tsCodigoVerificacao(self.CodigoVerificacao)
        elif nodeName_ == 'DataEmissao':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataEmissao = dval_
        elif nodeName_ == 'IdentificacaoRps':
            obj_ = tcIdentificacaoRps.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoRps = obj_
            obj_.original_tagname_ = 'IdentificacaoRps'
        elif nodeName_ == 'DataEmissaoRps':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataEmissaoRps = dval_
        elif nodeName_ == 'NaturezaOperacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'NaturezaOperacao')
            self.NaturezaOperacao = ival_
            # validate type tsNaturezaOperacao
            self.validate_tsNaturezaOperacao(self.NaturezaOperacao)
        elif nodeName_ == 'RegimeEspecialTributacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'RegimeEspecialTributacao')
            self.RegimeEspecialTributacao = ival_
            # validate type tsRegimeEspecialTributacao
            self.validate_tsRegimeEspecialTributacao(self.RegimeEspecialTributacao)
        elif nodeName_ == 'OptanteSimplesNacional' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'OptanteSimplesNacional')
            self.OptanteSimplesNacional = ival_
            # validate type tsSimNao
            self.validate_tsSimNao(self.OptanteSimplesNacional)
        elif nodeName_ == 'IncentivadorCultural' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'IncentivadorCultural')
            self.IncentivadorCultural = ival_
            # validate type tsSimNao
            self.validate_tsSimNao(self.IncentivadorCultural)
        elif nodeName_ == 'Competencia':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.Competencia = dval_
        elif nodeName_ == 'NfseSubstituida' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NfseSubstituida')
            self.NfseSubstituida = ival_
            # validate type tsNumeroNfse
            self.validate_tsNumeroNfse(self.NfseSubstituida)
        elif nodeName_ == 'OutrasInformacoes':
            OutrasInformacoes_ = child_.text
            OutrasInformacoes_ = self.gds_validate_string(OutrasInformacoes_, node, 'OutrasInformacoes')
            self.OutrasInformacoes = OutrasInformacoes_
            # validate type tsOutrasInformacoes
            self.validate_tsOutrasInformacoes(self.OutrasInformacoes)
        elif nodeName_ == 'Servico':
            obj_ = tcDadosServico.factory(parent_object_=self)
            obj_.build(child_)
            self.Servico = obj_
            obj_.original_tagname_ = 'Servico'
        elif nodeName_ == 'ValorCredito' and child_.text:
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ValorCredito')
            self.ValorCredito = fval_
            # validate type tsValor
            self.validate_tsValor(self.ValorCredito)
        elif nodeName_ == 'PrestadorServico':
            obj_ = tcDadosPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.PrestadorServico = obj_
            obj_.original_tagname_ = 'PrestadorServico'
        elif nodeName_ == 'TomadorServico':
            obj_ = tcDadosTomador.factory(parent_object_=self)
            obj_.build(child_)
            self.TomadorServico = obj_
            obj_.original_tagname_ = 'TomadorServico'
        elif nodeName_ == 'IntermediarioServico':
            obj_ = tcIdentificacaoIntermediarioServico.factory(parent_object_=self)
            obj_.build(child_)
            self.IntermediarioServico = obj_
            obj_.original_tagname_ = 'IntermediarioServico'
        elif nodeName_ == 'OrgaoGerador':
            obj_ = tcIdentificacaoOrgaoGerador.factory(parent_object_=self)
            obj_.build(child_)
            self.OrgaoGerador = obj_
            obj_.original_tagname_ = 'OrgaoGerador'
        elif nodeName_ == 'ContrucaoCivil':
            obj_ = tcDadosConstrucaoCivil.factory(parent_object_=self)
            obj_.build(child_)
            self.ContrucaoCivil = obj_
            obj_.original_tagname_ = 'ContrucaoCivil'
# end class tcInfNfse


class tcNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, versao=None, InfNfse=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.InfNfse = InfNfse
        if Signature is None:
            self.Signature = []
        else:
            self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcNfse.subclass:
            return tcNfse.subclass(*args_, **kwargs_)
        else:
            return tcNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsVersao(self, value):
        # Validate type tsVersao, a restriction on xsd:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsVersao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsVersao_patterns_, ))
    validate_tsVersao_patterns_ = [['^[1-9]{1}[0-9]{0,1}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.InfNfse is not None or
            self.Signature
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcNfse'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfNfse is not None:
            self.InfNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfNfse', pretty_print=pretty_print)
        for Signature_ in self.Signature:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Signature_), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_tsVersao(self.versao)    # validate type tsVersao
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InfNfse':
            obj_ = tcInfNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.InfNfse = obj_
            obj_.original_tagname_ = 'InfNfse'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature.append(Signature_)
# end class tcNfse


class tcInfPedidoCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, IdentificacaoNfse=None, CodigoCancelamento=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.IdentificacaoNfse = IdentificacaoNfse
        self.CodigoCancelamento = CodigoCancelamento
        self.validate_tsCodigoCancelamentoNfse(self.CodigoCancelamento)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcInfPedidoCancelamento)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcInfPedidoCancelamento.subclass:
            return tcInfPedidoCancelamento.subclass(*args_, **kwargs_)
        else:
            return tcInfPedidoCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCodigoCancelamentoNfse(self, value):
        # Validate type tsCodigoCancelamentoNfse, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoCancelamentoNfse' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoCancelamentoNfse' % {"value" : value.encode("utf-8")} )
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdentificacaoNfse is not None or
            self.CodigoCancelamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfPedidoCancelamento', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcInfPedidoCancelamento')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcInfPedidoCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcInfPedidoCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcInfPedidoCancelamento'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfPedidoCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoNfse is not None:
            self.IdentificacaoNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoNfse', pretty_print=pretty_print)
        if self.CodigoCancelamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigoCancelamento>%s</%sCodigoCancelamento>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CodigoCancelamento), input_name='CodigoCancelamento')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoNfse':
            obj_ = tcIdentificacaoNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoNfse = obj_
            obj_.original_tagname_ = 'IdentificacaoNfse'
        elif nodeName_ == 'CodigoCancelamento':
            CodigoCancelamento_ = child_.text
            CodigoCancelamento_ = self.gds_validate_string(CodigoCancelamento_, node, 'CodigoCancelamento')
            self.CodigoCancelamento = CodigoCancelamento_
            # validate type tsCodigoCancelamentoNfse
            self.validate_tsCodigoCancelamentoNfse(self.CodigoCancelamento)
# end class tcInfPedidoCancelamento


class tcPedidoCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, InfPedidoCancelamento=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.InfPedidoCancelamento = InfPedidoCancelamento
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcPedidoCancelamento)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcPedidoCancelamento.subclass:
            return tcPedidoCancelamento.subclass(*args_, **kwargs_)
        else:
            return tcPedidoCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.InfPedidoCancelamento is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcPedidoCancelamento', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcPedidoCancelamento')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcPedidoCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcPedidoCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcPedidoCancelamento'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcPedidoCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.InfPedidoCancelamento is not None:
            self.InfPedidoCancelamento.export(outfile, level, namespaceprefix_, namespacedef_='', name_='InfPedidoCancelamento', pretty_print=pretty_print)
        if self.Signature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Signature), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'InfPedidoCancelamento':
            obj_ = tcInfPedidoCancelamento.factory(parent_object_=self)
            obj_.build(child_)
            self.InfPedidoCancelamento = obj_
            obj_.original_tagname_ = 'InfPedidoCancelamento'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature = Signature_
# end class tcPedidoCancelamento


class tcConfirmacaoCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, Pedido=None, DataHoraCancelamento=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.Pedido = Pedido
        if isinstance(DataHoraCancelamento, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataHoraCancelamento, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataHoraCancelamento
        self.DataHoraCancelamento = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcConfirmacaoCancelamento)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcConfirmacaoCancelamento.subclass:
            return tcConfirmacaoCancelamento.subclass(*args_, **kwargs_)
        else:
            return tcConfirmacaoCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Pedido is not None or
            self.DataHoraCancelamento is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcConfirmacaoCancelamento', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcConfirmacaoCancelamento')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcConfirmacaoCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcConfirmacaoCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcConfirmacaoCancelamento'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcConfirmacaoCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pedido is not None:
            self.Pedido.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Pedido', pretty_print=pretty_print)
        if self.DataHoraCancelamento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataHoraCancelamento>%s</%sDataHoraCancelamento>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataHoraCancelamento, input_name='DataHoraCancelamento'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pedido':
            obj_ = tcPedidoCancelamento.factory(parent_object_=self)
            obj_.build(child_)
            self.Pedido = obj_
            obj_.original_tagname_ = 'Pedido'
        elif nodeName_ == 'DataHoraCancelamento':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataHoraCancelamento = dval_
# end class tcConfirmacaoCancelamento


class RetCancelamento(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NfseCancelamento=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if NfseCancelamento is None:
            self.NfseCancelamento = []
        else:
            self.NfseCancelamento = NfseCancelamento
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RetCancelamento)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RetCancelamento.subclass:
            return RetCancelamento.subclass(*args_, **kwargs_)
        else:
            return RetCancelamento(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.NfseCancelamento
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RetCancelamento', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RetCancelamento')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='RetCancelamento')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='RetCancelamento', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='RetCancelamento'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='RetCancelamento', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for NfseCancelamento_ in self.NfseCancelamento:
            NfseCancelamento_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NfseCancelamento', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NfseCancelamento':
            obj_ = tcCancelamentoNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.NfseCancelamento.append(obj_)
            obj_.original_tagname_ = 'NfseCancelamento'
# end class RetCancelamento


class tcCancelamentoNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, versao=None, Confirmacao=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.Confirmacao = Confirmacao
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcCancelamentoNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcCancelamentoNfse.subclass:
            return tcCancelamentoNfse.subclass(*args_, **kwargs_)
        else:
            return tcCancelamentoNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsVersao(self, value):
        # Validate type tsVersao, a restriction on xsd:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsVersao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsVersao_patterns_, ))
    validate_tsVersao_patterns_ = [['^[1-9]{1}[0-9]{0,1}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.Confirmacao is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCancelamentoNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcCancelamentoNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcCancelamentoNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcCancelamentoNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcCancelamentoNfse'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCancelamentoNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Confirmacao is not None:
            self.Confirmacao.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Confirmacao', pretty_print=pretty_print)
        if self.Signature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Signature), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_tsVersao(self.versao)    # validate type tsVersao
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Confirmacao':
            obj_ = tcConfirmacaoCancelamento.factory(parent_object_=self)
            obj_.build(child_)
            self.Confirmacao = obj_
            obj_.original_tagname_ = 'Confirmacao'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature = Signature_
# end class tcCancelamentoNfse


class tcInfSubstituicaoNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, NfseSubstituidora=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.NfseSubstituidora = NfseSubstituidora
        self.validate_tsNumeroNfse(self.NfseSubstituidora)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcInfSubstituicaoNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcInfSubstituicaoNfse.subclass:
            return tcInfSubstituicaoNfse.subclass(*args_, **kwargs_)
        else:
            return tcInfSubstituicaoNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroNfse(self, value):
        # Validate type tsNumeroNfse, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroNfse' % {"value" : value} )
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NfseSubstituidora is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfSubstituicaoNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcInfSubstituicaoNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcInfSubstituicaoNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcInfSubstituicaoNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcInfSubstituicaoNfse'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcInfSubstituicaoNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NfseSubstituidora is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNfseSubstituidora>%s</%sNfseSubstituidora>%s' % (namespaceprefix_ , self.gds_format_integer(self.NfseSubstituidora, input_name='NfseSubstituidora'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NfseSubstituidora' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NfseSubstituidora')
            self.NfseSubstituidora = ival_
            # validate type tsNumeroNfse
            self.validate_tsNumeroNfse(self.NfseSubstituidora)
# end class tcInfSubstituicaoNfse


class tcSubstituicaoNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, versao=None, SubstituicaoNfse=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.SubstituicaoNfse = SubstituicaoNfse
        if Signature is None:
            self.Signature = []
        else:
            self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcSubstituicaoNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcSubstituicaoNfse.subclass:
            return tcSubstituicaoNfse.subclass(*args_, **kwargs_)
        else:
            return tcSubstituicaoNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsVersao(self, value):
        # Validate type tsVersao, a restriction on xsd:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsVersao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsVersao_patterns_, ))
    validate_tsVersao_patterns_ = [['^[1-9]{1}[0-9]{0,1}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.SubstituicaoNfse is not None or
            self.Signature
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcSubstituicaoNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcSubstituicaoNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcSubstituicaoNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcSubstituicaoNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcSubstituicaoNfse'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcSubstituicaoNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SubstituicaoNfse is not None:
            self.SubstituicaoNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='SubstituicaoNfse', pretty_print=pretty_print)
        for Signature_ in self.Signature:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(Signature_), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_tsVersao(self.versao)    # validate type tsVersao
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SubstituicaoNfse':
            obj_ = tcInfSubstituicaoNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.SubstituicaoNfse = obj_
            obj_.original_tagname_ = 'SubstituicaoNfse'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature.append(Signature_)
# end class tcSubstituicaoNfse


class tcCompNfse(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Nfse=None, NfseCancelamento=None, NfseSubstituicao=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Nfse = Nfse
        self.NfseCancelamento = NfseCancelamento
        self.NfseSubstituicao = NfseSubstituicao
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcCompNfse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcCompNfse.subclass:
            return tcCompNfse.subclass(*args_, **kwargs_)
        else:
            return tcCompNfse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.Nfse is not None or
            self.NfseCancelamento is not None or
            self.NfseSubstituicao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCompNfse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcCompNfse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcCompNfse')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcCompNfse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcCompNfse'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcCompNfse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Nfse is not None:
            self.Nfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Nfse', pretty_print=pretty_print)
        if self.NfseCancelamento is not None:
            self.NfseCancelamento.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NfseCancelamento', pretty_print=pretty_print)
        if self.NfseSubstituicao is not None:
            self.NfseSubstituicao.export(outfile, level, namespaceprefix_, namespacedef_='', name_='NfseSubstituicao', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Nfse':
            obj_ = tcNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.Nfse = obj_
            obj_.original_tagname_ = 'Nfse'
        elif nodeName_ == 'NfseCancelamento':
            obj_ = tcCancelamentoNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.NfseCancelamento = obj_
            obj_.original_tagname_ = 'NfseCancelamento'
        elif nodeName_ == 'NfseSubstituicao':
            obj_ = tcSubstituicaoNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.NfseSubstituicao = obj_
            obj_.original_tagname_ = 'NfseSubstituicao'
# end class tcCompNfse


class ListaMensagemRetorno(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if MensagemRetorno is None:
            self.MensagemRetorno = []
        else:
            self.MensagemRetorno = MensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListaMensagemRetorno)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListaMensagemRetorno.subclass:
            return ListaMensagemRetorno.subclass(*args_, **kwargs_)
        else:
            return ListaMensagemRetorno(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.MensagemRetorno
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaMensagemRetorno', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListaMensagemRetorno')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListaMensagemRetorno')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListaMensagemRetorno', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListaMensagemRetorno'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaMensagemRetorno', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MensagemRetorno_ in self.MensagemRetorno:
            MensagemRetorno_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MensagemRetorno':
            obj_ = tcMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.MensagemRetorno.append(obj_)
            obj_.original_tagname_ = 'MensagemRetorno'
# end class ListaMensagemRetorno


class ListaMensagemRetornoLote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if MensagemRetorno is None:
            self.MensagemRetorno = []
        else:
            self.MensagemRetorno = MensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListaMensagemRetornoLote)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListaMensagemRetornoLote.subclass:
            return ListaMensagemRetornoLote.subclass(*args_, **kwargs_)
        else:
            return ListaMensagemRetornoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.MensagemRetorno
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaMensagemRetornoLote', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListaMensagemRetornoLote')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListaMensagemRetornoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListaMensagemRetornoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListaMensagemRetornoLote'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaMensagemRetornoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for MensagemRetorno_ in self.MensagemRetorno:
            MensagemRetorno_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='MensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MensagemRetorno':
            obj_ = tcMensagemRetornoLote.factory(parent_object_=self)
            obj_.build(child_)
            self.MensagemRetorno.append(obj_)
            obj_.original_tagname_ = 'MensagemRetorno'
# end class ListaMensagemRetornoLote


class tcMensagemRetorno(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Codigo=None, Mensagem=None, Correcao=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Codigo = Codigo
        self.validate_tsCodigoMensagemAlerta(self.Codigo)
        self.Mensagem = Mensagem
        self.validate_tsDescricaoMensagemAlerta(self.Mensagem)
        self.Correcao = Correcao
        self.validate_tsDescricaoMensagemAlerta(self.Correcao)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcMensagemRetorno)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcMensagemRetorno.subclass:
            return tcMensagemRetorno.subclass(*args_, **kwargs_)
        else:
            return tcMensagemRetorno(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCodigoMensagemAlerta(self, value):
        # Validate type tsCodigoMensagemAlerta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoMensagemAlerta' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoMensagemAlerta' % {"value" : value.encode("utf-8")} )
    def validate_tsDescricaoMensagemAlerta(self, value):
        # Validate type tsDescricaoMensagemAlerta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 200:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsDescricaoMensagemAlerta' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsDescricaoMensagemAlerta' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Codigo is not None or
            self.Mensagem is not None or
            self.Correcao is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcMensagemRetorno', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcMensagemRetorno')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcMensagemRetorno')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcMensagemRetorno', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcMensagemRetorno'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcMensagemRetorno', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Codigo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigo>%s</%sCodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Codigo), input_name='Codigo')), namespaceprefix_ , eol_))
        if self.Mensagem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMensagem>%s</%sMensagem>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mensagem), input_name='Mensagem')), namespaceprefix_ , eol_))
        if self.Correcao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCorrecao>%s</%sCorrecao>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Correcao), input_name='Correcao')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Codigo':
            Codigo_ = child_.text
            Codigo_ = self.gds_validate_string(Codigo_, node, 'Codigo')
            self.Codigo = Codigo_
            # validate type tsCodigoMensagemAlerta
            self.validate_tsCodigoMensagemAlerta(self.Codigo)
        elif nodeName_ == 'Mensagem':
            Mensagem_ = child_.text
            Mensagem_ = self.gds_validate_string(Mensagem_, node, 'Mensagem')
            self.Mensagem = Mensagem_
            # validate type tsDescricaoMensagemAlerta
            self.validate_tsDescricaoMensagemAlerta(self.Mensagem)
        elif nodeName_ == 'Correcao':
            Correcao_ = child_.text
            Correcao_ = self.gds_validate_string(Correcao_, node, 'Correcao')
            self.Correcao = Correcao_
            # validate type tsDescricaoMensagemAlerta
            self.validate_tsDescricaoMensagemAlerta(self.Correcao)
# end class tcMensagemRetorno


class tcMensagemRetornoLote(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdentificacaoRps=None, Codigo=None, Mensagem=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.IdentificacaoRps = IdentificacaoRps
        self.Codigo = Codigo
        self.validate_tsCodigoMensagemAlerta(self.Codigo)
        self.Mensagem = Mensagem
        self.validate_tsDescricaoMensagemAlerta(self.Mensagem)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcMensagemRetornoLote)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcMensagemRetornoLote.subclass:
            return tcMensagemRetornoLote.subclass(*args_, **kwargs_)
        else:
            return tcMensagemRetornoLote(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsCodigoMensagemAlerta(self, value):
        # Validate type tsCodigoMensagemAlerta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 4:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsCodigoMensagemAlerta' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsCodigoMensagemAlerta' % {"value" : value.encode("utf-8")} )
    def validate_tsDescricaoMensagemAlerta(self, value):
        # Validate type tsDescricaoMensagemAlerta, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 200:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsDescricaoMensagemAlerta' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsDescricaoMensagemAlerta' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.IdentificacaoRps is not None or
            self.Codigo is not None or
            self.Mensagem is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcMensagemRetornoLote', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcMensagemRetornoLote')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcMensagemRetornoLote')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcMensagemRetornoLote', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcMensagemRetornoLote'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcMensagemRetornoLote', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoRps is not None:
            self.IdentificacaoRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoRps', pretty_print=pretty_print)
        if self.Codigo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCodigo>%s</%sCodigo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Codigo), input_name='Codigo')), namespaceprefix_ , eol_))
        if self.Mensagem is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMensagem>%s</%sMensagem>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Mensagem), input_name='Mensagem')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoRps':
            obj_ = tcIdentificacaoRps.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoRps = obj_
            obj_.original_tagname_ = 'IdentificacaoRps'
        elif nodeName_ == 'Codigo':
            Codigo_ = child_.text
            Codigo_ = self.gds_validate_string(Codigo_, node, 'Codigo')
            self.Codigo = Codigo_
            # validate type tsCodigoMensagemAlerta
            self.validate_tsCodigoMensagemAlerta(self.Codigo)
        elif nodeName_ == 'Mensagem':
            Mensagem_ = child_.text
            Mensagem_ = self.gds_validate_string(Mensagem_, node, 'Mensagem')
            self.Mensagem = Mensagem_
            # validate type tsDescricaoMensagemAlerta
            self.validate_tsDescricaoMensagemAlerta(self.Mensagem)
# end class tcMensagemRetornoLote


class tcLoteRps(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Id=None, versao=None, NumeroLote=None, Cnpj=None, InscricaoMunicipal=None, QuantidadeRps=None, ListaRps=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Id = _cast(None, Id)
        self.versao = _cast(None, versao)
        self.NumeroLote = NumeroLote
        self.validate_tsNumeroLote(self.NumeroLote)
        self.Cnpj = Cnpj
        self.validate_tsCnpj(self.Cnpj)
        self.InscricaoMunicipal = InscricaoMunicipal
        self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
        self.QuantidadeRps = QuantidadeRps
        self.validate_tsQuantidadeRps(self.QuantidadeRps)
        self.ListaRps = ListaRps
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, tcLoteRps)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if tcLoteRps.subclass:
            return tcLoteRps.subclass(*args_, **kwargs_)
        else:
            return tcLoteRps(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroLote(self, value):
        # Validate type tsNumeroLote, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroLote' % {"value" : value} )
    def validate_tsCnpj(self, value):
        # Validate type tsCnpj, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 14:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on tsCnpj' % {"value" : value.encode("utf-8")} )
    def validate_tsInscricaoMunicipal(self, value):
        # Validate type tsInscricaoMunicipal, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on tsInscricaoMunicipal' % {"value" : value.encode("utf-8")} )
    def validate_tsQuantidadeRps(self, value):
        # Validate type tsQuantidadeRps, a restriction on xsd:int.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_tsIdTag(self, value):
        # Validate type tsIdTag, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 255:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsIdTag' % {"value" : value.encode("utf-8")} )
    def validate_tsVersao(self, value):
        # Validate type tsVersao, a restriction on xsd:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsVersao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsVersao_patterns_, ))
    validate_tsVersao_patterns_ = [['^[1-9]{1}[0-9]{0,1}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.Cnpj is not None or
            self.InscricaoMunicipal is not None or
            self.QuantidadeRps is not None or
            self.ListaRps is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcLoteRps', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('tcLoteRps')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='tcLoteRps')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='tcLoteRps', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='tcLoteRps'):
        if self.Id is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            outfile.write(' Id=%s' % (quote_attrib(self.Id), ))
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='tcLoteRps', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespaceprefix_ , eol_))
        if self.Cnpj is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCnpj>%s</%sCnpj>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Cnpj), input_name='Cnpj')), namespaceprefix_ , eol_))
        if self.InscricaoMunicipal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInscricaoMunicipal>%s</%sInscricaoMunicipal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.InscricaoMunicipal), input_name='InscricaoMunicipal')), namespaceprefix_ , eol_))
        if self.QuantidadeRps is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQuantidadeRps>%s</%sQuantidadeRps>%s' % (namespaceprefix_ , self.gds_format_integer(self.QuantidadeRps, input_name='QuantidadeRps'), namespaceprefix_ , eol_))
        if self.ListaRps is not None:
            self.ListaRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaRps', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Id', node)
        if value is not None and 'Id' not in already_processed:
            already_processed.add('Id')
            self.Id = value
            self.validate_tsIdTag(self.Id)    # validate type tsIdTag
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_tsVersao(self.versao)    # validate type tsVersao
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            # validate type tsNumeroLote
            self.validate_tsNumeroLote(self.NumeroLote)
        elif nodeName_ == 'Cnpj':
            Cnpj_ = child_.text
            Cnpj_ = self.gds_validate_string(Cnpj_, node, 'Cnpj')
            self.Cnpj = Cnpj_
            # validate type tsCnpj
            self.validate_tsCnpj(self.Cnpj)
        elif nodeName_ == 'InscricaoMunicipal':
            InscricaoMunicipal_ = child_.text
            InscricaoMunicipal_ = self.gds_validate_string(InscricaoMunicipal_, node, 'InscricaoMunicipal')
            self.InscricaoMunicipal = InscricaoMunicipal_
            # validate type tsInscricaoMunicipal
            self.validate_tsInscricaoMunicipal(self.InscricaoMunicipal)
        elif nodeName_ == 'QuantidadeRps' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'QuantidadeRps')
            self.QuantidadeRps = ival_
            # validate type tsQuantidadeRps
            self.validate_tsQuantidadeRps(self.QuantidadeRps)
        elif nodeName_ == 'ListaRps':
            obj_ = ListaRpsType.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaRps = obj_
            obj_.original_tagname_ = 'ListaRps'
# end class tcLoteRps


class EnviarLoteRpsResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumeroLote=None, DataRecebimento=None, Protocolo=None, ListaMensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumeroLote = NumeroLote
        self.validate_tsNumeroLote(self.NumeroLote)
        if isinstance(DataRecebimento, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataRecebimento, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = DataRecebimento
        self.DataRecebimento = initvalue_
        self.Protocolo = Protocolo
        self.validate_tsNumeroProtocolo(self.Protocolo)
        self.ListaMensagemRetorno = ListaMensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnviarLoteRpsResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnviarLoteRpsResposta.subclass:
            return EnviarLoteRpsResposta.subclass(*args_, **kwargs_)
        else:
            return EnviarLoteRpsResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroLote(self, value):
        # Validate type tsNumeroLote, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroLote' % {"value" : value} )
    def validate_tsNumeroProtocolo(self, value):
        # Validate type tsNumeroProtocolo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsNumeroProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.DataRecebimento is not None or
            self.Protocolo is not None or
            self.ListaMensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnviarLoteRpsResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnviarLoteRpsResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnviarLoteRpsResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnviarLoteRpsResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnviarLoteRpsResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnviarLoteRpsResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespaceprefix_ , eol_))
        if self.DataRecebimento is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataRecebimento>%s</%sDataRecebimento>%s' % (namespaceprefix_ , self.gds_format_datetime(self.DataRecebimento, input_name='DataRecebimento'), namespaceprefix_ , eol_))
        if self.Protocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProtocolo>%s</%sProtocolo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Protocolo), input_name='Protocolo')), namespaceprefix_ , eol_))
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            # validate type tsNumeroLote
            self.validate_tsNumeroLote(self.NumeroLote)
        elif nodeName_ == 'DataRecebimento':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.DataRecebimento = dval_
        elif nodeName_ == 'Protocolo':
            Protocolo_ = child_.text
            Protocolo_ = self.gds_validate_string(Protocolo_, node, 'Protocolo')
            self.Protocolo = Protocolo_
            # validate type tsNumeroProtocolo
            self.validate_tsNumeroProtocolo(self.Protocolo)
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
# end class EnviarLoteRpsResposta


class EnviarLoteRpsEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LoteRps=None, Signature=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.LoteRps = LoteRps
        self.Signature = Signature
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EnviarLoteRpsEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EnviarLoteRpsEnvio.subclass:
            return EnviarLoteRpsEnvio.subclass(*args_, **kwargs_)
        else:
            return EnviarLoteRpsEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.LoteRps is not None or
            self.Signature is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnviarLoteRpsEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EnviarLoteRpsEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='EnviarLoteRpsEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='EnviarLoteRpsEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='EnviarLoteRpsEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='EnviarLoteRpsEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LoteRps is not None:
            self.LoteRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='LoteRps', pretty_print=pretty_print)
        if self.Signature is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSignature>%s</%sSignature>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Signature), input_name='Signature')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LoteRps':
            obj_ = tcLoteRps.factory(parent_object_=self)
            obj_.build(child_)
            self.LoteRps = obj_
            obj_.original_tagname_ = 'LoteRps'
        elif nodeName_ == 'Signature':
            Signature_ = child_.text
            Signature_ = self.gds_validate_string(Signature_, node, 'Signature')
            self.Signature = Signature_
# end class EnviarLoteRpsEnvio


class ConsultarSituacaoLoteRpsResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, NumeroLote=None, Situacao=None, ListaMensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.NumeroLote = NumeroLote
        self.validate_tsNumeroLote(self.NumeroLote)
        self.Situacao = Situacao
        self.validate_tsSituacaoLoteRps(self.Situacao)
        self.ListaMensagemRetorno = ListaMensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarSituacaoLoteRpsResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarSituacaoLoteRpsResposta.subclass:
            return ConsultarSituacaoLoteRpsResposta.subclass(*args_, **kwargs_)
        else:
            return ConsultarSituacaoLoteRpsResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroLote(self, value):
        # Validate type tsNumeroLote, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroLote' % {"value" : value} )
    def validate_tsSituacaoLoteRps(self, value):
        # Validate type tsSituacaoLoteRps, a restriction on xsd:byte.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsSituacaoLoteRps_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsSituacaoLoteRps_patterns_, ))
    validate_tsSituacaoLoteRps_patterns_ = [['^1|2|3|4$']]
    def hasContent_(self):
        if (
            self.NumeroLote is not None or
            self.Situacao is not None or
            self.ListaMensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarSituacaoLoteRpsResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarSituacaoLoteRpsResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarSituacaoLoteRpsResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarSituacaoLoteRpsResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarSituacaoLoteRpsResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarSituacaoLoteRpsResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.NumeroLote is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroLote>%s</%sNumeroLote>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroLote, input_name='NumeroLote'), namespaceprefix_ , eol_))
        if self.Situacao is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSituacao>%s</%sSituacao>%s' % (namespaceprefix_ , self.gds_format_integer(self.Situacao, input_name='Situacao'), namespaceprefix_ , eol_))
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'NumeroLote' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroLote')
            self.NumeroLote = ival_
            # validate type tsNumeroLote
            self.validate_tsNumeroLote(self.NumeroLote)
        elif nodeName_ == 'Situacao' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'Situacao')
            self.Situacao = ival_
            # validate type tsSituacaoLoteRps
            self.validate_tsSituacaoLoteRps(self.Situacao)
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
# end class ConsultarSituacaoLoteRpsResposta


class ConsultarSituacaoLoteRpsEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Prestador=None, Protocolo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Prestador = Prestador
        self.Protocolo = Protocolo
        self.validate_tsNumeroProtocolo(self.Protocolo)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarSituacaoLoteRpsEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarSituacaoLoteRpsEnvio.subclass:
            return ConsultarSituacaoLoteRpsEnvio.subclass(*args_, **kwargs_)
        else:
            return ConsultarSituacaoLoteRpsEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroProtocolo(self, value):
        # Validate type tsNumeroProtocolo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsNumeroProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Prestador is not None or
            self.Protocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarSituacaoLoteRpsEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarSituacaoLoteRpsEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarSituacaoLoteRpsEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarSituacaoLoteRpsEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarSituacaoLoteRpsEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarSituacaoLoteRpsEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Prestador', pretty_print=pretty_print)
        if self.Protocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProtocolo>%s</%sProtocolo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Protocolo), input_name='Protocolo')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.Prestador = obj_
            obj_.original_tagname_ = 'Prestador'
        elif nodeName_ == 'Protocolo':
            Protocolo_ = child_.text
            Protocolo_ = self.gds_validate_string(Protocolo_, node, 'Protocolo')
            self.Protocolo = Protocolo_
            # validate type tsNumeroProtocolo
            self.validate_tsNumeroProtocolo(self.Protocolo)
# end class ConsultarSituacaoLoteRpsEnvio


class ConsultarNfseRpsResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompNfse=None, ListaMensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CompNfse = CompNfse
        self.ListaMensagemRetorno = ListaMensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarNfseRpsResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarNfseRpsResposta.subclass:
            return ConsultarNfseRpsResposta.subclass(*args_, **kwargs_)
        else:
            return ConsultarNfseRpsResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.CompNfse is not None or
            self.ListaMensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseRpsResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarNfseRpsResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarNfseRpsResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarNfseRpsResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarNfseRpsResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseRpsResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompNfse is not None:
            self.CompNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompNfse', pretty_print=pretty_print)
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompNfse':
            obj_ = tcCompNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.CompNfse = obj_
            obj_.original_tagname_ = 'CompNfse'
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
# end class ConsultarNfseRpsResposta


class ConsultarNfseRpsEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IdentificacaoRps=None, Prestador=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.IdentificacaoRps = IdentificacaoRps
        self.Prestador = Prestador
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarNfseRpsEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarNfseRpsEnvio.subclass:
            return ConsultarNfseRpsEnvio.subclass(*args_, **kwargs_)
        else:
            return ConsultarNfseRpsEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.IdentificacaoRps is not None or
            self.Prestador is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseRpsEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarNfseRpsEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarNfseRpsEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarNfseRpsEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarNfseRpsEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseRpsEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.IdentificacaoRps is not None:
            self.IdentificacaoRps.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IdentificacaoRps', pretty_print=pretty_print)
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Prestador', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'IdentificacaoRps':
            obj_ = tcIdentificacaoRps.factory(parent_object_=self)
            obj_.build(child_)
            self.IdentificacaoRps = obj_
            obj_.original_tagname_ = 'IdentificacaoRps'
        elif nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.Prestador = obj_
            obj_.original_tagname_ = 'Prestador'
# end class ConsultarNfseRpsEnvio


class ConsultarNfseResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListaNfse=None, ListaMensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ListaNfse = ListaNfse
        self.ListaMensagemRetorno = ListaMensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarNfseResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarNfseResposta.subclass:
            return ConsultarNfseResposta.subclass(*args_, **kwargs_)
        else:
            return ConsultarNfseResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.ListaNfse is not None or
            self.ListaMensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarNfseResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarNfseResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarNfseResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarNfseResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListaNfse is not None:
            self.ListaNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaNfse', pretty_print=pretty_print)
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListaNfse':
            obj_ = ListaNfseType.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaNfse = obj_
            obj_.original_tagname_ = 'ListaNfse'
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
# end class ConsultarNfseResposta


class ConsultarNfseEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Prestador=None, NumeroNfse=None, PeriodoEmissao=None, Tomador=None, IntermediarioServico=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Prestador = Prestador
        self.NumeroNfse = NumeroNfse
        self.validate_tsNumeroNfse(self.NumeroNfse)
        self.PeriodoEmissao = PeriodoEmissao
        self.Tomador = Tomador
        self.IntermediarioServico = IntermediarioServico
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarNfseEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarNfseEnvio.subclass:
            return ConsultarNfseEnvio.subclass(*args_, **kwargs_)
        else:
            return ConsultarNfseEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroNfse(self, value):
        # Validate type tsNumeroNfse, a restriction on xsd:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) >= 15:
                warnings_.warn('Value "%(value)s" does not match xsd maxInclusive restriction on tsNumeroNfse' % {"value" : value} )
    def hasContent_(self):
        if (
            self.Prestador is not None or
            self.NumeroNfse is not None or
            self.PeriodoEmissao is not None or
            self.Tomador is not None or
            self.IntermediarioServico is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarNfseEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarNfseEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarNfseEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarNfseEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarNfseEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Prestador', pretty_print=pretty_print)
        if self.NumeroNfse is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNumeroNfse>%s</%sNumeroNfse>%s' % (namespaceprefix_ , self.gds_format_integer(self.NumeroNfse, input_name='NumeroNfse'), namespaceprefix_ , eol_))
        if self.PeriodoEmissao is not None:
            self.PeriodoEmissao.export(outfile, level, namespaceprefix_, namespacedef_='', name_='PeriodoEmissao', pretty_print=pretty_print)
        if self.Tomador is not None:
            self.Tomador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Tomador', pretty_print=pretty_print)
        if self.IntermediarioServico is not None:
            self.IntermediarioServico.export(outfile, level, namespaceprefix_, namespacedef_='', name_='IntermediarioServico', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.Prestador = obj_
            obj_.original_tagname_ = 'Prestador'
        elif nodeName_ == 'NumeroNfse' and child_.text:
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'NumeroNfse')
            self.NumeroNfse = ival_
            # validate type tsNumeroNfse
            self.validate_tsNumeroNfse(self.NumeroNfse)
        elif nodeName_ == 'PeriodoEmissao':
            obj_ = PeriodoEmissaoType.factory(parent_object_=self)
            obj_.build(child_)
            self.PeriodoEmissao = obj_
            obj_.original_tagname_ = 'PeriodoEmissao'
        elif nodeName_ == 'Tomador':
            obj_ = tcIdentificacaoTomador.factory(parent_object_=self)
            obj_.build(child_)
            self.Tomador = obj_
            obj_.original_tagname_ = 'Tomador'
        elif nodeName_ == 'IntermediarioServico':
            obj_ = tcIdentificacaoIntermediarioServico.factory(parent_object_=self)
            obj_.build(child_)
            self.IntermediarioServico = obj_
            obj_.original_tagname_ = 'IntermediarioServico'
# end class ConsultarNfseEnvio


class ConsultarLoteRpsResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ListaNfse=None, ListaMensagemRetorno=None, ListaMensagemRetornoLote=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ListaNfse = ListaNfse
        self.ListaMensagemRetorno = ListaMensagemRetorno
        self.ListaMensagemRetornoLote = ListaMensagemRetornoLote
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarLoteRpsResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarLoteRpsResposta.subclass:
            return ConsultarLoteRpsResposta.subclass(*args_, **kwargs_)
        else:
            return ConsultarLoteRpsResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.ListaNfse is not None or
            self.ListaMensagemRetorno is not None or
            self.ListaMensagemRetornoLote is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarLoteRpsResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarLoteRpsResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarLoteRpsResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarLoteRpsResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarLoteRpsResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarLoteRpsResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ListaNfse is not None:
            self.ListaNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaNfse', pretty_print=pretty_print)
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
        if self.ListaMensagemRetornoLote is not None:
            self.ListaMensagemRetornoLote.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetornoLote', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ListaNfse':
            obj_ = ListaNfseType1.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaNfse = obj_
            obj_.original_tagname_ = 'ListaNfse'
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
        elif nodeName_ == 'ListaMensagemRetornoLote':
            obj_ = ListaMensagemRetornoLote.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetornoLote = obj_
            obj_.original_tagname_ = 'ListaMensagemRetornoLote'
# end class ConsultarLoteRpsResposta


class ConsultarLoteRpsEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Prestador=None, Protocolo=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Prestador = Prestador
        self.Protocolo = Protocolo
        self.validate_tsNumeroProtocolo(self.Protocolo)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ConsultarLoteRpsEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ConsultarLoteRpsEnvio.subclass:
            return ConsultarLoteRpsEnvio.subclass(*args_, **kwargs_)
        else:
            return ConsultarLoteRpsEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsNumeroProtocolo(self, value):
        # Validate type tsNumeroProtocolo, a restriction on xsd:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on tsNumeroProtocolo' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.Prestador is not None or
            self.Protocolo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarLoteRpsEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ConsultarLoteRpsEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ConsultarLoteRpsEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ConsultarLoteRpsEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ConsultarLoteRpsEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ConsultarLoteRpsEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Prestador is not None:
            self.Prestador.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Prestador', pretty_print=pretty_print)
        if self.Protocolo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProtocolo>%s</%sProtocolo>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.Protocolo), input_name='Protocolo')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Prestador':
            obj_ = tcIdentificacaoPrestador.factory(parent_object_=self)
            obj_.build(child_)
            self.Prestador = obj_
            obj_.original_tagname_ = 'Prestador'
        elif nodeName_ == 'Protocolo':
            Protocolo_ = child_.text
            Protocolo_ = self.gds_validate_string(Protocolo_, node, 'Protocolo')
            self.Protocolo = Protocolo_
            # validate type tsNumeroProtocolo
            self.validate_tsNumeroProtocolo(self.Protocolo)
# end class ConsultarLoteRpsEnvio


class CancelarNfseResposta(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, RetCancelamento=None, ListaMensagemRetorno=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.RetCancelamento = RetCancelamento
        self.ListaMensagemRetorno = ListaMensagemRetorno
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelarNfseResposta)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelarNfseResposta.subclass:
            return CancelarNfseResposta.subclass(*args_, **kwargs_)
        else:
            return CancelarNfseResposta(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.RetCancelamento is not None or
            self.ListaMensagemRetorno is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelarNfseResposta', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelarNfseResposta')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CancelarNfseResposta')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CancelarNfseResposta', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CancelarNfseResposta'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelarNfseResposta', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.RetCancelamento is not None:
            self.RetCancelamento.export(outfile, level, namespaceprefix_, namespacedef_='', name_='RetCancelamento', pretty_print=pretty_print)
        if self.ListaMensagemRetorno is not None:
            self.ListaMensagemRetorno.export(outfile, level, namespaceprefix_, namespacedef_='', name_='ListaMensagemRetorno', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'RetCancelamento':
            obj_ = RetCancelamento.factory(parent_object_=self)
            obj_.build(child_)
            self.RetCancelamento = obj_
            obj_.original_tagname_ = 'RetCancelamento'
        elif nodeName_ == 'ListaMensagemRetorno':
            obj_ = ListaMensagemRetorno.factory(parent_object_=self)
            obj_.build(child_)
            self.ListaMensagemRetorno = obj_
            obj_.original_tagname_ = 'ListaMensagemRetorno'
# end class CancelarNfseResposta


class CancelarNfseEnvio(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Pedido=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.Pedido = Pedido
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CancelarNfseEnvio)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CancelarNfseEnvio.subclass:
            return CancelarNfseEnvio.subclass(*args_, **kwargs_)
        else:
            return CancelarNfseEnvio(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.Pedido is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelarNfseEnvio', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CancelarNfseEnvio')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='CancelarNfseEnvio')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='CancelarNfseEnvio', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='CancelarNfseEnvio'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='CancelarNfseEnvio', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.Pedido is not None:
            self.Pedido.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Pedido', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Pedido':
            obj_ = tcPedidoCancelamento.factory(parent_object_=self)
            obj_.build(child_)
            self.Pedido = obj_
            obj_.original_tagname_ = 'Pedido'
# end class CancelarNfseEnvio


class cabecalho(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, versao=None, versaoDados=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.versao = _cast(None, versao)
        self.versaoDados = versaoDados
        self.validate_tsVersao(self.versaoDados)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, cabecalho)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if cabecalho.subclass:
            return cabecalho.subclass(*args_, **kwargs_)
        else:
            return cabecalho(*args_, **kwargs_)
    factory = staticmethod(factory)
    def validate_tsVersao(self, value):
        # Validate type tsVersao, a restriction on xsd:token.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_tsVersao_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_tsVersao_patterns_, ))
    validate_tsVersao_patterns_ = [['^[1-9]{1}[0-9]{0,1}\\.[0-9]{2}$']]
    def hasContent_(self):
        if (
            self.versaoDados is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='cabecalho', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('cabecalho')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='cabecalho')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='cabecalho', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='cabecalho'):
        if self.versao is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            outfile.write(' versao=%s' % (quote_attrib(self.versao), ))
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='cabecalho', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.versaoDados is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversaoDados>%s</%sversaoDados>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.versaoDados), input_name='versaoDados')), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('versao', node)
        if value is not None and 'versao' not in already_processed:
            already_processed.add('versao')
            self.versao = value
            self.versao = ' '.join(self.versao.split())
            self.validate_tsVersao(self.versao)    # validate type tsVersao
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'versaoDados':
            versaoDados_ = child_.text
            if versaoDados_:
                versaoDados_ = re_.sub(String_cleanup_pat_, " ", versaoDados_).strip()
            else:
                versaoDados_ = ""
            versaoDados_ = self.gds_validate_string(versaoDados_, node, 'versaoDados')
            self.versaoDados = versaoDados_
            # validate type tsVersao
            self.validate_tsVersao(self.versaoDados)
# end class cabecalho


class ListaRpsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Rps=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if Rps is None:
            self.Rps = []
        else:
            self.Rps = Rps
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListaRpsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListaRpsType.subclass:
            return ListaRpsType.subclass(*args_, **kwargs_)
        else:
            return ListaRpsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.Rps
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaRpsType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListaRpsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListaRpsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListaRpsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListaRpsType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaRpsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for Rps_ in self.Rps:
            Rps_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='Rps', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'Rps':
            obj_ = tcRps.factory(parent_object_=self)
            obj_.build(child_)
            self.Rps.append(obj_)
            obj_.original_tagname_ = 'Rps'
# end class ListaRpsType


class ListaNfseType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompNfse=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.CompNfse = CompNfse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListaNfseType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListaNfseType.subclass:
            return ListaNfseType.subclass(*args_, **kwargs_)
        else:
            return ListaNfseType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.CompNfse is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaNfseType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListaNfseType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListaNfseType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListaNfseType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListaNfseType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaNfseType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.CompNfse is not None:
            self.CompNfse.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompNfse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompNfse':
            obj_ = tcCompNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.CompNfse = obj_
            obj_.original_tagname_ = 'CompNfse'
# end class ListaNfseType


class PeriodoEmissaoType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DataInicial=None, DataFinal=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if isinstance(DataInicial, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataInicial, '%Y-%m-%d').date()
        else:
            initvalue_ = DataInicial
        self.DataInicial = initvalue_
        if isinstance(DataFinal, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(DataFinal, '%Y-%m-%d').date()
        else:
            initvalue_ = DataFinal
        self.DataFinal = initvalue_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PeriodoEmissaoType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PeriodoEmissaoType.subclass:
            return PeriodoEmissaoType.subclass(*args_, **kwargs_)
        else:
            return PeriodoEmissaoType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.DataInicial is not None or
            self.DataFinal is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodoEmissaoType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PeriodoEmissaoType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='PeriodoEmissaoType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='PeriodoEmissaoType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='PeriodoEmissaoType'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='PeriodoEmissaoType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DataInicial is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataInicial>%s</%sDataInicial>%s' % (namespaceprefix_ , self.gds_format_date(self.DataInicial, input_name='DataInicial'), namespaceprefix_ , eol_))
        if self.DataFinal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDataFinal>%s</%sDataFinal>%s' % (namespaceprefix_ , self.gds_format_date(self.DataFinal, input_name='DataFinal'), namespaceprefix_ , eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DataInicial':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataInicial = dval_
        elif nodeName_ == 'DataFinal':
            sval_ = child_.text
            dval_ = self.gds_parse_date(sval_)
            self.DataFinal = dval_
# end class PeriodoEmissaoType


class ListaNfseType1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, CompNfse=None, **kwargs_):
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        if CompNfse is None:
            self.CompNfse = []
        else:
            self.CompNfse = CompNfse
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, ListaNfseType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if ListaNfseType1.subclass:
            return ListaNfseType1.subclass(*args_, **kwargs_)
        else:
            return ListaNfseType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (
            self.CompNfse
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaNfseType1', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('ListaNfseType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='ListaNfseType1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='ListaNfseType1', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='ListaNfseType1'):
        pass
    def exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='ListaNfseType1', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for CompNfse_ in self.CompNfse:
            CompNfse_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='CompNfse', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'CompNfse':
            obj_ = tcCompNfse.factory(parent_object_=self)
            obj_.build(child_)
            self.CompNfse.append(obj_)
            obj_.original_tagname_ = 'CompNfse'
# end class ListaNfseType1


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tcCpfCnpj'
        rootClass = tcCpfCnpj
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tcCpfCnpj'
        rootClass = tcCpfCnpj
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tcCpfCnpj'
        rootClass = tcCpfCnpj
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'tcCpfCnpj'
        rootClass = tcCpfCnpj
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from nfse import *\n\n')
        sys.stdout.write('import nfse as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CancelarNfseEnvio",
    "CancelarNfseResposta",
    "ConsultarLoteRpsEnvio",
    "ConsultarLoteRpsResposta",
    "ConsultarNfseEnvio",
    "ConsultarNfseResposta",
    "ConsultarNfseRpsEnvio",
    "ConsultarNfseRpsResposta",
    "ConsultarSituacaoLoteRpsEnvio",
    "ConsultarSituacaoLoteRpsResposta",
    "EnviarLoteRpsEnvio",
    "EnviarLoteRpsResposta",
    "ListaMensagemRetorno",
    "ListaMensagemRetornoLote",
    "ListaNfseType",
    "ListaNfseType1",
    "ListaRpsType",
    "PeriodoEmissaoType",
    "RetCancelamento",
    "cabecalho",
    "tcCancelamentoNfse",
    "tcCompNfse",
    "tcConfirmacaoCancelamento",
    "tcContato",
    "tcCpfCnpj",
    "tcDadosConstrucaoCivil",
    "tcDadosPrestador",
    "tcDadosServico",
    "tcDadosTomador",
    "tcEndereco",
    "tcIdentificacaoIntermediarioServico",
    "tcIdentificacaoNfse",
    "tcIdentificacaoOrgaoGerador",
    "tcIdentificacaoPrestador",
    "tcIdentificacaoRps",
    "tcIdentificacaoTomador",
    "tcInfNfse",
    "tcInfPedidoCancelamento",
    "tcInfRps",
    "tcInfSubstituicaoNfse",
    "tcLoteRps",
    "tcMensagemRetorno",
    "tcMensagemRetornoLote",
    "tcNfse",
    "tcPedidoCancelamento",
    "tcRps",
    "tcSubstituicaoNfse",
    "tcValores"
]
